{"ast":null,"code":"//引入echarts\nimport * as echarts from 'echarts';\nimport { getNamespecelist } from \"@/api/namespace\";\nimport { getNodeList } from \"@/api/node\";\nimport { getDeploymentByNs, getdeploymentlist } from \"@/api/deployment\";\nimport { GetPodByNS, getPodList } from \"@/api/pod\";\nexport default {\n  data() {\n    return {\n      //控制折叠面板的展开，表示打开所有的折叠面板\n      activeNames: [\"1\", \"2\", \"3\"],\n      //获取namespace的属性\n      namespaceActive: 0,\n      namespaceValue: 'default',\n      namespaceTotal: 0,\n      //获取node的属性\n      nodeTotal: 0,\n      //cpu可分配\n      nodeCpuAllocatable: 0,\n      //cpu总量\n      nodeCpuCapacity: 0,\n      //内存可分配\n      nodeMemAllocatable: 0,\n      //内存总量\n      nodeMemCapacity: 0,\n      //pod可分配\n      nodePodAllocatable: 0,\n      //pod总量\n      nodePodCapacity: 0,\n      getNodesData: {\n        params: {}\n      },\n      //获取deployment的数量\n      deploymentTotal: 0,\n      getDeploymentsData: {\n        params: {\n          namespace: ''\n        }\n      },\n      //获取pod的数量\n      podTotal: 0,\n      getPodsData: {\n        params: {\n          namespace: ''\n        }\n      },\n      //每个namespace中pod的数量[{namespace:\"default\",pod_num:5}]\n      podNumNp: [],\n      //每个namespace中deployment的数量[{namespace:\"default\",deployment_num:5}]\n      deploymentNumNp: []\n    };\n  },\n\n  methods: {\n    //获取namespace的数量\n    getNamespaces() {\n      getNamespecelist().then(res => {\n        this.namespaceTotal = res.data.total;\n        let namespaceList = res.data.items; //处理namespace active的数量\n\n        let index;\n\n        for (index in namespaceList) {\n          if (namespaceList[index].status.phase === \"Active\") {\n            this.namespaceActive = this.namespaceActive + 1;\n          }\n        }\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //用于内存数据的转换\n    specTrans(num) {\n      let a = num / 1024 / 1024; //四舍五入保留小数点0位，也就是去除小数点\n\n      return a.toFixed(0);\n    },\n\n    //获取node属性\n    getNodes() {\n      getNodeList(this.getNodesData.params).then(res => {\n        this.nodeTotal = res.data.total;\n        let nodeList = res.data.items;\n        let index;\n\n        for (index in nodeList) {\n          //正则匹配纯数字，如果不是纯数字则跳过\n          let isnum = /^\\d+$/.test(nodeList[index].status.allocatable.cpu);\n\n          if (!isnum) {\n            continue;\n          } //计算node的cpu mem和pod的可分配及总容量数据\n\n\n          this.nodeCpuAllocatable = parseInt(nodeList[index].status.allocatable.cpu) + this.nodeCpuAllocatable;\n          this.nodeCpuCapacity = parseInt(nodeList[index].status.capacity.cpu) + this.nodeCpuCapacity;\n          this.nodeMemAllocatable = parseInt(nodeList[index].status.allocatable.memory) + this.nodeMemAllocatable;\n          this.nodeMemCapacity = parseInt(nodeList[index].status.capacity.memory) + this.nodeMemCapacity;\n          this.nodePodAllocatable = parseInt(nodeList[index].status.allocatable.pods) + this.nodePodAllocatable;\n          this.nodePodCapacity = parseInt(nodeList[index].status.capacity.pods) + this.nodePodCapacity;\n        }\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //获取命名空间下的deployment总数\n    getDeployments() {\n      this.getDeploymentsData.params.namespace = this.namespaceValue;\n      getdeploymentlist(this.getDeploymentsData.params).then(res => {\n        this.deploymentTotal = res.data.total;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //获取命名空间下的pod总数\n    getPods() {\n      this.getPodsData.params.namespace = this.namespaceValue;\n      getPodList(this.getPodsData.params).then(res => {\n        this.podTotal = res.data.total;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //获取每个namespace中deployment的数量\n    getDeploymentNumNp() {\n      getDeploymentByNs().then(res => {\n        this.deploymentNumNp = res.data; //echarts作图\n\n        this.getDeployNumDash();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //获取每个namespace中pod的数量\n    getPodNumNp() {\n      GetPodByNS().then(res => {\n        this.podNumNp = res.data; //echarts作图\n\n        this.getPodNumDash();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    getPodNumDash() {\n      //若实例已经初始化了，则销毁实例\n      // if (this.podNumDash != null && this.podNumDash != \"\" && this.podNumDash != undefined) {\n      //   this.podNumDash.dispose()\n      // }\n      //初始化实例，绑定到dom上\n      this.podNumDash = echarts.init(document.getElementById('podNumDash'));\n      console.log(this.podNumNp); //echarts作图配置\n\n      this.podNumDash.setOption({\n        //标题及字体颜色\n        title: {\n          text: 'Pods per Namespace',\n          textStyle: {\n            color: 'rgb(134, 135, 136)'\n          }\n        },\n        //图表颜色\n        color: ['#67E0E3', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'],\n        //提示框\n        tooltip: {\n          //触发类型坐标轴触发\n          trigger: \"axis\",\n          //'cross' 十字准星指示器\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#76baf1\"\n            }\n          }\n        },\n        //图表中的数据类型解释\n        legend: {\n          data: ['Pods']\n        },\n        //图表数据集\n        dataset: {\n          //维度定义，默认第一个元素表示x轴的数据，其他都是y轴数据\n          dimensions: ['namespace', 'pod_num'],\n          //源数据\n          source: this.podNumNp\n        },\n        //x轴属性\n        xAxis: {\n          //category类目轴，value数值轴，time时间轴，log对数轴\n          type: 'category',\n          //轴标签\n          axisLabel: {\n            //坐标轴刻度标签的显示间隔，在类目轴中有效.0显示所有\n            interval: 0,\n            //格式化轴标签\n            formatter: function (value) {\n              return value.length > 5 ? value.substring(0, 5) + '...' : value;\n            }\n          }\n        },\n        //y轴属性\n        yAxis: [//数值轴\n        {\n          type: 'value'\n        }],\n        //定义系列，用于指定一组数值以及他们映射成的图\n        series: [{\n          //name是legend对应的值\n          name: 'Pods',\n          //bar柱状图，line折线图，pie饼图等等\n          type: 'bar',\n          //每个类目的值标签，配置\n          label: {\n            //是否显示值\n            show: true,\n            //显示的位置\n            position: 'top'\n          }\n        }]\n      });\n    },\n\n    getDeployNumDash() {\n      // if (this.deployNumDash != null && this.deployNumDash != \"\" && this.deployNumDash != undefined) {\n      //   this.deployNumDash.dispose()\n      // }\n      this.deployNumDash = echarts.init(document.getElementById('deployNumDash'));\n      this.deployNumDash.setOption({\n        title: {\n          text: 'Deployments per Namespace',\n          textStyle: {\n            color: 'rgb(134, 135, 136)'\n          }\n        },\n        color: ['#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'],\n        tooltip: {\n          trigger: \"axis\",\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#76baf1\"\n            }\n          }\n        },\n        legend: {\n          data: ['Deployments']\n        },\n        dataset: {\n          // 提供一份数据。\n          dimensions: ['namespace', 'deployment_num'],\n          source: this.deploymentNumNp\n        },\n        xAxis: {\n          type: 'category',\n          axisLabel: {\n            interval: 0,\n            formatter: function (value) {\n              return value.length > 5 ? value.substring(0, 5) + '...' : value;\n            }\n          }\n        },\n        yAxis: [{\n          type: 'value'\n        }],\n        // 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。\n        series: [{\n          name: 'Deployments',\n          type: 'bar',\n          label: {\n            show: true,\n            position: 'top'\n          }\n        }]\n      });\n    }\n\n  },\n\n  beforeMount() {\n    this.getNamespaces();\n    this.getNodes();\n    this.getDeployments();\n    this.getPods();\n    this.getDeploymentNumNp();\n    this.getPodNumNp();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["echarts","getNamespecelist","getNodeList","getDeploymentByNs","getdeploymentlist","GetPodByNS","getPodList","data","activeNames","namespaceActive","namespaceValue","namespaceTotal","nodeTotal","nodeCpuAllocatable","nodeCpuCapacity","nodeMemAllocatable","nodeMemCapacity","nodePodAllocatable","nodePodCapacity","getNodesData","params","deploymentTotal","getDeploymentsData","namespace","podTotal","getPodsData","podNumNp","deploymentNumNp","methods","getNamespaces","then","res","total","namespaceList","items","index","status","phase","catch","$message","error","message","msg","specTrans","num","a","toFixed","getNodes","nodeList","isnum","test","allocatable","cpu","parseInt","capacity","memory","pods","getDeployments","getPods","getDeploymentNumNp","getDeployNumDash","getPodNumNp","getPodNumDash","podNumDash","init","document","getElementById","console","log","setOption","title","text","textStyle","color","tooltip","trigger","axisPointer","type","label","backgroundColor","legend","dataset","dimensions","source","xAxis","axisLabel","interval","formatter","value","length","substring","yAxis","series","name","show","position","deployNumDash","beforeMount"],"sourceRoot":"","sources":["/Users/allen/kubemanage-web/src/views/home/HomeView.vue"],"sourcesContent":["<template>\n  <!-- <KeepAlive> -->\n    <div class=\"home\">\n      <!-- 折叠面板 -->\n      <el-collapse v-model=\"activeNames\">\n        <!-- 面板1 集群资源卡片 -->\n        <el-collapse-item title=\"集群资源\" name=\"1\">\n          <el-row :gutter=\"10\" style=\"margin-bottom: 10px;\">\n            <!-- 命名空间数量 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div style=\"float:left;padding-top:20%\">\n                  <!-- 进度条 -->\n                  <!-- stroke-width 进度条的宽度 -->\n                  <!-- show-text 是否显示文字描述 -->\n                  <!-- percentage 进度百分比 -->\n                  <el-progress :stroke-width=\"20\" :show-text=\"false\" type=\"circle\"\n                    :percentage=\"namespaceActive / namespaceTotal * 100\"></el-progress>\n                </div>\n                <div>\n                  <p class=\"home-node-card-title\">命名空间: Active/总量</p>\n                  <p class=\"home-node-card-num\">{{ namespaceActive }}/{{ namespaceTotal }}</p>\n                </div>\n              </el-card>\n            </el-col>\n            <!-- 服务数量 单个namespace中deployment的数量 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div>\n                  <p class=\"home-node-card-title\">服务数</p>\n                  <p class=\"home-node-card-num\">{{ deploymentTotal }}</p>\n                </div>\n              </el-card>\n            </el-col>\n            <!-- 实例数 单个namespace中pod的数量 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div>\n                  <p class=\"home-node-card-title\">实例数</p>\n                  <p class=\"home-node-card-num\">{{ podTotal }}</p>\n                </div>\n              </el-card>\n            </el-col>\n          </el-row>\n        </el-collapse-item>\n        <!-- 面板2 节点资源卡片 -->\n        <el-collapse-item title=\"节点资源\" name=\"2\">\n          <el-row :gutter=\"10\" style=\"margin-bottom: 10px;\">\n            <!-- 节点数量 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div style=\"float:left;padding-top:20%\">\n                  <el-progress :stroke-width=\"20\" :show-text=\"false\" type=\"circle\"\n                    :percentage=\"nodeTotal / nodeTotal * 100\"></el-progress>\n                </div>\n                <div>\n                  <p class=\"home-node-card-title\">节点: Ready/总数量</p>\n                  <p class=\"home-node-card-num\">{{ nodeTotal }}/{{ nodeTotal }}</p>\n                </div>\n              </el-card>\n            </el-col>\n            <!-- CPU资源统计 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div style=\"float:left;padding-top:20%\">\n                  <el-progress :stroke-width=\"20\" :show-text=\"false\" type=\"circle\"\n                    :percentage=\"nodeCpuAllocatable / nodeCpuCapacity * 100\"></el-progress>\n                </div>\n                <div>\n                  <p class=\"home-node-card-title\">CPU: 可分配/容量</p>\n                  <p class=\"home-node-card-num\">{{ nodeCpuAllocatable }}/{{ nodeCpuCapacity }}</p>\n                </div>\n              </el-card>\n            </el-col>\n            <!-- 内存资源统计 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div style=\"float:left;padding-top:20%\">\n                  <el-progress :stroke-width=\"20\" :show-text=\"false\" type=\"circle\"\n                    :percentage=\"nodeMemAllocatable / nodeMemCapacity * 100\"></el-progress>\n                </div>\n                <div>\n                  <p class=\"home-node-card-title\">内存: 可分配/容量</p>\n                  <p class=\"home-node-card-num\">{{ specTrans(nodeMemAllocatable) }}Gi/{{ specTrans(nodeMemCapacity) }}Gi\n                  </p>\n                </div>\n              </el-card>\n            </el-col>\n            <!-- POD资源统计 -->\n            <el-col :span=\"5\">\n              <el-card class=\"home-node-card\" :body-style=\"{ padding: '10px' }\">\n                <div style=\"float:left;padding-top:20%\">\n                  <el-progress :stroke-width=\"20\" :show-text=\"false\" type=\"circle\"\n                    :percentage=\"nodePodAllocatable / nodePodAllocatable * 100\"></el-progress>\n                </div>\n                <div>\n                  <p class=\"home-node-card-title\">POD: 可分配/容量</p>\n                  <p class=\"home-node-card-num\">{{ nodePodAllocatable }}/{{ nodePodAllocatable }}</p>\n                </div>\n              </el-card>\n            </el-col>\n          </el-row>\n        </el-collapse-item>\n        <!-- 面板3 资源统计画图 -->\n        <el-collapse-item title=\"资源统计\" name=\"3\">\n          <el-row :gutter=\"10\">\n            <!-- 每个namspace中pod数量的作图统计 -->\n            <el-col :span=\"24\" style=\"margin-bottom: 10px;\">\n              <el-card class=\"home-dash-card\" :body-style=\"{ padding: '10px' }\">\n                <!-- 这个div就是画图的内容，echarts初始化后会绑定到这个id上展示出来 -->\n                <div id=\"podNumDash\" style=\"height: 300px;\">\n                </div>\n              </el-card>\n            </el-col>\n            <!-- 每个namespace中deployment数量的作图统计 -->\n            <el-col :span=\"24\">\n              <el-card class=\"home-dash-card\" :body-style=\"{ padding: '10px' }\">\n                <div id=\"deployNumDash\" style=\"height: 300px;\">\n                </div>\n              </el-card>\n            </el-col>\n          </el-row>\n        </el-collapse-item>\n      </el-collapse>\n    </div>\n  <!-- </KeepAlive> -->\n</template>\n\n<script>\n//引入echarts\nimport * as echarts from 'echarts'\nimport { getNamespecelist } from \"@/api/namespace\";\nimport { getNodeList } from \"@/api/node\";\nimport { getDeploymentByNs, getdeploymentlist } from \"@/api/deployment\";\nimport { GetPodByNS, getPodList } from \"@/api/pod\";\nexport default {\n  data () {\n    return {\n      //控制折叠面板的展开，表示打开所有的折叠面板\n      activeNames: [\"1\", \"2\", \"3\"],\n      //获取namespace的属性\n      namespaceActive: 0,\n      namespaceValue: 'default',\n      namespaceTotal: 0,\n      //获取node的属性\n      nodeTotal: 0,\n      //cpu可分配\n      nodeCpuAllocatable: 0,\n      //cpu总量\n      nodeCpuCapacity: 0,\n      //内存可分配\n      nodeMemAllocatable: 0,\n      //内存总量\n      nodeMemCapacity: 0,\n      //pod可分配\n      nodePodAllocatable: 0,\n      //pod总量\n      nodePodCapacity: 0,\n      getNodesData: {\n        params: {}\n      },\n      //获取deployment的数量\n      deploymentTotal: 0,\n      getDeploymentsData: {\n        params: {\n          namespace: '',\n        }\n      },\n      //获取pod的数量\n      podTotal: 0,\n      getPodsData: {\n        params: {\n          namespace: '',\n        }\n      },\n      //每个namespace中pod的数量[{namespace:\"default\",pod_num:5}]\n      podNumNp: [],\n      //每个namespace中deployment的数量[{namespace:\"default\",deployment_num:5}]\n      deploymentNumNp: [],\n    }\n  },\n  methods: {\n    //获取namespace的数量\n    getNamespaces () {\n      getNamespecelist()\n        .then(res => {\n          this.namespaceTotal = res.data.total\n          let namespaceList = res.data.items\n          //处理namespace active的数量\n          let index\n          for (index in namespaceList) {\n            if (namespaceList[index].status.phase === \"Active\") {\n              this.namespaceActive = this.namespaceActive + 1\n            }\n          }\n        })\n        .catch(res => {\n          this.$message.error({\n            message: res.msg\n          })\n        })\n    },\n    //用于内存数据的转换\n    specTrans (num) {\n      let a = num / 1024 / 1024\n      //四舍五入保留小数点0位，也就是去除小数点\n      return a.toFixed(0)\n    },\n    //获取node属性\n    getNodes () {\n      getNodeList(this.getNodesData.params)\n        .then(res => {\n          this.nodeTotal = res.data.total\n          let nodeList = res.data.items\n          let index\n          for (index in nodeList) {\n            //正则匹配纯数字，如果不是纯数字则跳过\n            let isnum = /^\\d+$/.test(nodeList[index].status.allocatable.cpu);\n            if (!isnum) {\n              continue\n            }\n            //计算node的cpu mem和pod的可分配及总容量数据\n            this.nodeCpuAllocatable = parseInt(nodeList[index].status.allocatable.cpu) + this.nodeCpuAllocatable\n            this.nodeCpuCapacity = parseInt(nodeList[index].status.capacity.cpu) + this.nodeCpuCapacity\n            this.nodeMemAllocatable = parseInt(nodeList[index].status.allocatable.memory) + this.nodeMemAllocatable\n            this.nodeMemCapacity = parseInt(nodeList[index].status.capacity.memory) + this.nodeMemCapacity\n            this.nodePodAllocatable = parseInt(nodeList[index].status.allocatable.pods) + this.nodePodAllocatable\n            this.nodePodCapacity = parseInt(nodeList[index].status.capacity.pods) + this.nodePodCapacity\n          }\n        })\n        .catch(res => {\n          this.$message.error({\n            message: res.msg\n          })\n        })\n    },\n    //获取命名空间下的deployment总数\n    getDeployments () {\n      this.getDeploymentsData.params.namespace = this.namespaceValue\n      getdeploymentlist(this.getDeploymentsData.params)\n        .then(res => {\n          this.deploymentTotal = res.data.total\n        })\n        .catch(res => {\n          this.$message.error({\n            message: res.msg\n          })\n        })\n    },\n    //获取命名空间下的pod总数\n    getPods () {\n      this.getPodsData.params.namespace = this.namespaceValue\n      getPodList(this.getPodsData.params)\n        .then(res => {\n          this.podTotal = res.data.total\n        })\n        .catch(res => {\n          this.$message.error({\n            message: res.msg\n          })\n        })\n    },\n    //获取每个namespace中deployment的数量\n    getDeploymentNumNp () {\n      getDeploymentByNs()\n        .then(res => {\n          this.deploymentNumNp = res.data\n          //echarts作图\n          this.getDeployNumDash()\n        })\n        .catch(res => {\n          this.$message.error({\n            message: res.msg\n          })\n        })\n    },\n    //获取每个namespace中pod的数量\n    getPodNumNp () {\n      GetPodByNS()\n        .then(res => {\n          this.podNumNp = res.data\n          //echarts作图\n          this.getPodNumDash()\n        })\n        .catch(res => {\n          this.$message.error({\n            message: res.msg\n          })\n        })\n    },\n    getPodNumDash () {\n      //若实例已经初始化了，则销毁实例\n      // if (this.podNumDash != null && this.podNumDash != \"\" && this.podNumDash != undefined) {\n      //   this.podNumDash.dispose()\n      // }\n      //初始化实例，绑定到dom上\n      this.podNumDash = echarts.init(document.getElementById('podNumDash'));\n      console.log(this.podNumNp)\n      //echarts作图配置\n      this.podNumDash.setOption({\n        //标题及字体颜色\n        title: { text: 'Pods per Namespace', textStyle: { color: 'rgb(134, 135, 136)' } },\n        //图表颜色\n        color: ['#67E0E3', '#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'],\n        //提示框\n        tooltip: {\n          //触发类型坐标轴触发\n          trigger: \"axis\",\n          //'cross' 十字准星指示器\n          axisPointer: {\n            type: \"cross\",\n            label: {\n              backgroundColor: \"#76baf1\"\n            }\n          }\n        },\n        //图表中的数据类型解释\n        legend: {\n          data: ['Pods']\n        },\n        //图表数据集\n        dataset: {\n          //维度定义，默认第一个元素表示x轴的数据，其他都是y轴数据\n          dimensions: ['namespace', 'pod_num'],\n          //源数据\n          source: this.podNumNp\n        },\n        //x轴属性\n        xAxis: {\n          //category类目轴，value数值轴，time时间轴，log对数轴\n          type: 'category',\n          //轴标签\n          axisLabel: {\n            //坐标轴刻度标签的显示间隔，在类目轴中有效.0显示所有\n            interval: 0,\n            //格式化轴标签\n            formatter: function (value) {\n              return value.length > 5 ? value.substring(0, 5) + '...' : value\n            }\n          },\n        },\n        //y轴属性\n        yAxis: [\n          //数值轴\n          { type: 'value' }\n        ],\n        //定义系列，用于指定一组数值以及他们映射成的图\n        series: [{\n          //name是legend对应的值\n          name: 'Pods',\n          //bar柱状图，line折线图，pie饼图等等\n          type: 'bar',\n          //每个类目的值标签，配置\n          label: {\n            //是否显示值\n            show: true,\n            //显示的位置\n            position: 'top'\n          }\n        }\n        ]\n      });\n    },\n    getDeployNumDash () {\n      // if (this.deployNumDash != null && this.deployNumDash != \"\" && this.deployNumDash != undefined) {\n      //   this.deployNumDash.dispose()\n      // }\n      this.deployNumDash = echarts.init(document.getElementById('deployNumDash'));\n\n      this.deployNumDash.setOption({\n        title: { text: 'Deployments per Namespace', textStyle: { color: 'rgb(134, 135, 136)' } },\n        color: ['#9FE6B8', '#FFDB5C', '#ff9f7f', '#fb7293', '#E062AE', '#E690D1', '#e7bcf3', '#9d96f5', '#8378EA', '#96BFFF'],\n        tooltip: { trigger: \"axis\", axisPointer: { type: \"cross\", label: { backgroundColor: \"#76baf1\" } } },\n        legend: {\n          data: ['Deployments']\n        },\n        dataset: {\n          // 提供一份数据。\n          dimensions: ['namespace', 'deployment_num'],\n          source: this.deploymentNumNp\n        },\n        xAxis: {\n          type: 'category',\n          axisLabel: {\n            interval: 0,\n            formatter: function (value) {\n              return value.length > 5 ? value.substring(0, 5) + '...' : value\n            }\n          },\n        },\n        yAxis: [\n          { type: 'value' }\n        ],\n        // 声明多个 bar 系列，默认情况下，每个系列会自动对应到 dataset 的每一列。\n        series: [{\n          name: 'Deployments',\n          type: 'bar',\n          label: {\n            show: true,\n            position: 'top'\n          }\n        }\n        ]\n      });\n    },\n  },\n  beforeMount () {\n    this.getNamespaces()\n    this.getNodes()\n    this.getDeployments()\n    this.getPods()\n    this.getDeploymentNumNp()\n    this.getPodNumNp()\n  }\n}\n</script>\n\n<style scoped>\n/deep/ .el-collapse-item__header {\n  font-size: 16px;\n}\n\n.home-node-card {\n  border-radius: 1px;\n  text-align: center;\n  background-color: rgb(250, 253, 255);\n}\n\n.home-dash-card {\n  border-radius: 1px;\n}\n\n.home-node-card-title {\n  font-size: 12px;\n}\n\n.home-node-card-num {\n  font-size: 22px;\n  font-weight: bold;\n  color: rgb(63, 92, 135);\n}\n\n/deep/ .el-progress-circle {\n  height: 50px !important;\n  width: 50px !important;\n}</style>"]},"metadata":{},"sourceType":"module"}