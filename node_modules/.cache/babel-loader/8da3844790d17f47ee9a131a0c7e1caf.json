{"ast":null,"code":"import common from \"../common/Config\";\nimport yaml2obj from 'js-yaml';\nimport json2yaml from 'json2yaml';\nimport { createDeployment, deleteDeployment, getdeploymentdetail, getdeploymentlist, restartdeployment, scaledeployment, updatedeployment } from \"@/api/deployment\";\nimport { getNamespecelist } from \"@/api/namespace\";\nexport default {\n  data() {\n    return {\n      //编辑器配置\n      cmOptions: {\n        // 语言及语法模式\n        mode: 'text/yaml',\n        // 主题\n        theme: 'darcula',\n        // 显示行数\n        lineNumbers: true,\n        smartIndent: true,\n        //智能缩进\n        indentUnit: 4,\n        // 智能缩进单元长度为 4 个空格\n        styleActiveLine: true,\n        // 显示选中行的样式\n        matchBrackets: true,\n        //每当光标位于匹配的方括号旁边时，都会使其高亮显示\n        readOnly: false,\n        lineWrapping: true //自动换行\n\n      },\n      contentYaml: '',\n      //分页\n      currentPage: 1,\n      pagesize: 10,\n      pagesizeList: [10, 20, 30],\n      //搜索框内容\n      searchInput: '',\n      //命名空间\n      namespaceValue: 'default',\n      namespaceList: [],\n      //列表\n      appLoading: false,\n      deploymentList: [],\n      deploymentTotal: 0,\n      getDeploymentsData: {\n        url: common.k8sDeploymentList,\n        params: {\n          filter_name: '',\n          namespace: '',\n          page: '',\n          limit: ''\n        }\n      },\n      //创建\n      fullscreenLoading: false,\n      direction: 'rtl',\n      createDeploymentDrawer: false,\n      createDeployment: {\n        name: '',\n        namespace: '',\n        replicas: 1,\n        image: '',\n        resource: '',\n        health_check: false,\n        health_path: '',\n        label_str: '',\n        label: {},\n        container_port: ''\n      },\n      //创建请求的参数\n      createDeploymentData: {\n        url: common.k8sDeploymentCreate,\n        params: {}\n      },\n      //创建deployment的表单校验规则\n      createDeploymentRules: {\n        name: [{\n          required: true,\n          message: '请填写名称',\n          trigger: 'change'\n        }],\n        image: [{\n          required: true,\n          message: '请填写镜像',\n          trigger: 'change'\n        }],\n        namespace: [{\n          required: true,\n          message: '请选择命名空间',\n          trigger: 'change'\n        }],\n        resource: [{\n          required: true,\n          message: '请选择配额',\n          trigger: 'change'\n        }],\n        label_str: [{\n          required: true,\n          message: '请填写标签',\n          trigger: 'change'\n        }],\n        container_port: [{\n          required: true,\n          message: '请填写容器端口',\n          trigger: 'change'\n        }]\n      },\n      //详情\n      deploymentDetail: {},\n      getDeploymentDetailData: {\n        params: {\n          deployment_name: '',\n          namespace: ''\n        }\n      },\n      //yaml更新\n      yamlDialog: false,\n      updateDeploymentData: {\n        params: {\n          namespace: '',\n          content: ''\n        }\n      },\n      //扩缩容\n      scaleNum: 0,\n      scaleDialog: false,\n      scaleDeploymentData: {\n        params: {\n          deployment_name: '',\n          namespace: '',\n          scale_num: ''\n        }\n      },\n      //重启\n      restartDeploymentData: {\n        params: {\n          deployment_name: '',\n          namespace: ''\n        }\n      },\n      //删除\n      delDeploymentData: {\n        params: {\n          deployment_name: '',\n          namespace: ''\n        }\n      }\n    };\n  },\n\n  methods: {\n    //json转yaml方法\n    transYaml(content) {\n      return json2yaml.stringify(content);\n    },\n\n    //yaml转对象\n    transObj(content) {\n      return yaml2obj.load(content);\n    },\n\n    //编辑器内容变化时触发的方式,用于将更新的内容复制到变量中\n    onChange(val) {\n      this.contentYaml = val;\n    },\n\n    //页面大小发生变化时触发，赋值并重新获取列表\n    handleSizeChange(size) {\n      this.pagesize = size;\n      this.getDeployments();\n    },\n\n    //页数发生变化时触发，复制并重新获取列表\n    handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.getDeployments();\n    },\n\n    //处理抽屉的关闭，增加体验感\n    handleClose(done) {\n      this.$confirm('确认关闭？').then(() => {\n        done();\n      }).catch(() => {});\n    },\n\n    //字符串截取、拼接并返回\n    ellipsis(value) {\n      return value.length > 15 ? value.substring(0, 15) + '...' : value;\n    },\n\n    //格林威治时间转为北京时间\n    timeTrans(timestamp) {\n      let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000);\n      date = date.toJSON();\n      date = date.substring(0, 19).replace('T', ' ');\n      return date;\n    },\n\n    //获取Namespace列表\n    getNamespaces() {\n      getNamespecelist().then(res => {\n        this.namespaceList = res.data.items;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //获取Deployment列表\n    getDeployments() {\n      //表格加载动画开启\n      this.appLoading = true; //getDeploymentsData是用于发起deployment列表请求的专用的对象，里面有url和params参数,以下是赋值\n\n      this.getDeploymentsData.params.filter_name = this.searchInput;\n      this.getDeploymentsData.params.namespace = this.namespaceValue;\n      this.getDeploymentsData.params.page = this.currentPage;\n      this.getDeploymentsData.params.limit = this.pagesize;\n      getdeploymentlist(this.getDeploymentsData.params).then(res => {\n        //响应成功，获取deployment列表和total\n        this.deploymentList = res.data.items;\n        this.deploymentTotal = res.data.total;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      }); //加载动画关闭\n\n      this.appLoading = false;\n    },\n\n    //获取deployment详情，e参数标识传入的scope插槽，.row是该行的数据\n    getDeploymentDetail(e) {\n      this.getDeploymentDetailData.params.deployment_name = e.row.metadata.name;\n      this.getDeploymentDetailData.params.namespace = this.namespaceValue;\n      getdeploymentdetail(this.getDeploymentDetailData.params).then(res => {\n        //响应成功，获得deployment详情\n        this.deploymentDetail = res.data; //将对象转成yaml格式的字符串\n\n        this.contentYaml = this.transYaml(this.deploymentDetail);\n        console.log(this.contentYaml); //打开弹出框\n\n        this.yamlDialog = true;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //更新deployment\n    updateDeployment() {\n      //将yaml格式的deployment对象转为json\n      let content = JSON.stringify(this.transObj(this.contentYaml));\n      this.updateDeploymentData.params.namespace = this.namespaceValue;\n      this.updateDeploymentData.params.content = content;\n      updatedeployment(this.updateDeploymentData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        }); //更新后重新获取列表\n\n        this.getDeployments();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      }); //关闭弹出框\n\n      this.yamlDialog = false;\n    },\n\n    //扩缩容的中间方法，用于赋值及打开弹出框\n    handleScale(e) {\n      this.scaleDialog = true;\n      this.deploymentDetail = e.row;\n      this.scaleNum = e.row.spec.replicas;\n    },\n\n    //扩缩容deployment\n    scaleDeployment() {\n      this.scaleDeploymentData.params.deployment_name = this.deploymentDetail.metadata.name;\n      this.scaleDeploymentData.params.namespace = this.namespaceValue;\n      this.scaleDeploymentData.params.scale_num = this.scaleNum;\n      scaledeployment(this.scaleDeploymentData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        }); //更新后重新获取列表\n\n        this.getDeployments();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      }); //关闭弹出框\n\n      this.scaleDialog = false;\n    },\n\n    //重启deployment\n    restartDeployment(e) {\n      this.restartDeploymentData.params.deployment_name = e.row.metadata.name;\n      this.restartDeploymentData.params.namespace = this.namespaceValue;\n      restartdeployment(this.restartDeploymentData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        });\n        this.getDeployments();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //删除deployment\n    delDeployment(e) {\n      this.delDeploymentData.params.deployment_name = e.row.metadata.name;\n      this.delDeploymentData.params.namespace = this.namespaceValue;\n      deleteDeployment(this.delDeploymentData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        });\n        this.getDeployments();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    //弹出确认框，用于危险操作的double check\n    //obj是行数据，opeateName是操作名，fn是操作的方法\n    handleConfirm(obj, operateName, fn) {\n      this.confirmContent = '确认继续 ' + operateName + ' 操作吗？'; //$confirm用于弹出确认框\n\n      this.$confirm(this.confirmContent, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消'\n      }).then(() => {\n        fn(obj);\n      }).catch(() => {\n        this.$message.info({\n          message: '已取消操作'\n        });\n      });\n    },\n\n    //创建deployment，加Func的原因是因为createDeploy用于属性了\n    createDeployFunc() {\n      //正则匹配，验证label的合法性\n      let reg = new RegExp(\"(^[A-Za-z]+=[A-Za-z0-9]+).*\");\n\n      if (!reg.test(this.createDeployment.label_str)) {\n        this.$message.warning({\n          message: \"标签填写异常，请确认后重新填写\"\n        });\n        return;\n      } //加载loading动画\n\n\n      this.fullscreenLoading = true; //定义label、cpu和memory变量\n\n      let label = new Map();\n      let cpu, memory; //将label字符串转成数组\n\n      let a = this.createDeployment.label_str.split(\",\"); //将数组转成map\n\n      a.forEach(item => {\n        let b = item.split(\"=\");\n        label[b[0]] = b[1];\n      }); //将deployment的规格转成cpu和memory\n\n      let resourceList = this.createDeployment.resource.split(\"/\");\n      cpu = resourceList[0];\n      memory = resourceList[1] + \"Gi\"; //赋值\n\n      this.createDeploymentData.params = this.createDeployment;\n      this.createDeploymentData.params.container_port = parseInt(this.createDeployment.container_port);\n      this.createDeploymentData.params.label = label;\n      this.createDeploymentData.params.cpu = cpu;\n      this.createDeploymentData.params.memory = memory;\n      createDeployment(this.createDeploymentData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        }); //创建后重新获取列表\n\n        this.getDeployments();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      }); //重置表单\n\n      this.resetForm('createDeployment'); //关闭加载动画\n\n      this.fullscreenLoading = false; //关闭抽屉\n\n      this.createDeploymentDrawer = false;\n    },\n\n    //重置表单方法，element plus课程讲过的\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n\n    //提交表单，校验参数合法性\n    submitForm(formName) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          this.createDeployFunc();\n        } else {\n          return false;\n        }\n      });\n    }\n\n  },\n  watch: {\n    //监听namespace的值,若发生变化，则执行handler方法中的内容\n    namespaceValue: {\n      handler() {\n        //将namespace的值存入本地，用于path切换时依旧能获取得到\n        localStorage.setItem('namespace', this.namespaceValue); //重置当前页为1\n\n        this.currentPage = 1; //获取deployment列表\n\n        this.getDeployments();\n      }\n\n    }\n  },\n\n  beforeMount() {\n    //加载页面时先获取localStorage中的namespace值，若获取不到则默认default\n    if (localStorage.getItem('namespace') !== undefined && localStorage.getItem('namespace') !== null) {\n      this.namespaceValue = localStorage.getItem('namespace');\n    }\n\n    this.getNamespaces();\n    this.getDeployments();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["common","yaml2obj","json2yaml","createDeployment","deleteDeployment","getdeploymentdetail","getdeploymentlist","restartdeployment","scaledeployment","updatedeployment","getNamespecelist","data","cmOptions","mode","theme","lineNumbers","smartIndent","indentUnit","styleActiveLine","matchBrackets","readOnly","lineWrapping","contentYaml","currentPage","pagesize","pagesizeList","searchInput","namespaceValue","namespaceList","appLoading","deploymentList","deploymentTotal","getDeploymentsData","url","k8sDeploymentList","params","filter_name","namespace","page","limit","fullscreenLoading","direction","createDeploymentDrawer","name","replicas","image","resource","health_check","health_path","label_str","label","container_port","createDeploymentData","k8sDeploymentCreate","createDeploymentRules","required","message","trigger","deploymentDetail","getDeploymentDetailData","deployment_name","yamlDialog","updateDeploymentData","content","scaleNum","scaleDialog","scaleDeploymentData","scale_num","restartDeploymentData","delDeploymentData","methods","transYaml","stringify","transObj","load","onChange","val","handleSizeChange","size","getDeployments","handleCurrentChange","handleClose","done","$confirm","then","catch","ellipsis","value","length","substring","timeTrans","timestamp","date","Date","getTime","toJSON","replace","getNamespaces","res","items","$message","error","msg","total","getDeploymentDetail","e","row","metadata","console","log","updateDeployment","JSON","success","handleScale","spec","scaleDeployment","restartDeployment","delDeployment","handleConfirm","obj","operateName","fn","confirmContent","confirmButtonText","cancelButtonText","info","createDeployFunc","reg","RegExp","test","warning","Map","cpu","memory","a","split","forEach","item","b","resourceList","parseInt","resetForm","formName","$refs","resetFields","submitForm","validate","valid","watch","handler","localStorage","setItem","beforeMount","getItem","undefined"],"sourceRoot":"","sources":["/Users/allen/k8s-platform-fe/src/views/deployment/Deployment.vue"],"sourcesContent":["<template>\n  <div class=\"deploy\">\n    <el-row>\n      <!-- 头部1 -->\n      <el-col :span=\"24\">\n        <div>\n          <!-- 包一层卡片 -->\n          <el-card class=\"deploy-head-card\" shadow=\"never\" :body-style=\"{padding:'10px'}\">\n            <el-row>\n              <!-- 命名空间的下拉框 -->\n              <el-col :span=\"6\">\n                <div>\n                  <span>命名空间: </span>\n                  <!-- 下拉框 -->\n                  <!-- filterable：带搜索功能 -->\n                  <!-- placeholder 默认提示 -->\n                  <!-- label 显示内容 -->\n                  <!-- value 绑定到v-model的值中 -->\n                  <el-select v-model=\"namespaceValue\" filterable placeholder=\"请选择\">\n                    <el-option\n                        v-for=\"(item, index) in namespaceList\"\n                        :key=\"index\"\n                        :label=\"item.metadata.name\"\n                        :value=\"item.metadata.name\">\n                    </el-option>\n                  </el-select>\n                </div>\n              </el-col>\n              <!-- 刷新按钮 -->\n              <el-col :span=\"2\" :offset=\"16\">\n                <div>\n                  <!-- 每次刷新，都重新调一次list接口，刷新表格中的数据 -->\n                  <el-button style=\"border-radius:2px;\" icon=\"Refresh\" plain @click=\"getDeployments()\">刷新</el-button>\n                </div>\n              </el-col>\n            </el-row>\n          </el-card>\n        </div>\n      </el-col>\n      <!-- 头部2 -->\n      <el-col :span=\"24\">\n        <div>\n          <!-- 包一层卡片 -->\n          <el-card class=\"deploy-head-card\" shadow=\"never\" :body-style=\"{padding:'10px'}\">\n            <el-row>\n              <!-- 创建按钮 -->\n              <el-col :span=\"2\">\n                <div>\n                  <!-- 点击后打开抽屉，填入创建deployment需要的数据 -->\n                  <el-button style=\"border-radius:2px;\" icon=\"Edit\" type=\"primary\" @click=\"createDeploymentDrawer = true\" v-loading.fullscreen.lock=\"fullscreenLoading\">创建</el-button>\n                </div>\n              </el-col>\n              <!-- 搜索框和搜索按钮 -->\n              <el-col :span=\"6\">\n                <div>\n                  <el-input class=\"deploy-head-search\" clearable placeholder=\"请输入\" v-model=\"searchInput\"></el-input>\n                  <el-button style=\"border-radius:2px;\" icon=\"Search\" type=\"primary\" plain @click=\"getDeployments()\">搜索</el-button>\n                </div>\n              </el-col>\n            </el-row>\n          </el-card>\n        </div>\n      </el-col>\n      <!-- 数据表格 -->\n      <el-col :span=\"24\">\n        <div>\n          <!-- 包一层卡片 -->\n          <el-card class=\"deploy-body-card\" shadow=\"never\" :body-style=\"{padding:'5px'}\">\n            <!-- 数据表格 -->\n            <!-- v-loading用于加载时的loading动画 -->\n            <el-table\n                style=\"width:100%;font-size:12px;margin-bottom:10px;\"\n                :data=\"deploymentList\"\n                v-loading=\"appLoading\">\n              <!-- 最左侧留出20px的宽度，更加没关 -->\n              <el-table-column width=\"20\"></el-table-column>\n              <!-- deployment名字 -->\n              <el-table-column align=left label=\"Deployment名\">\n                <!-- 插槽，scope.row获取当前行的数据 -->\n                <template v-slot=\"scope\">\n                  <a class=\"deploy-body-deployname\">{{ scope.row.metadata.name }}</a>\n                </template>\n              </el-table-column>\n              <!-- 标签 -->\n              <el-table-column align=center label=\"标签\">\n                <template v-slot=\"scope\">\n                  <!-- for循环，每个label只显示固定长度，鼠标悬停后气泡弹出框显示完整长度 -->\n                  <div v-for=\"(val, key) in scope.row.metadata.labels\" :key=\"key\">\n                    <!-- 气泡弹出框 -->\n                    <!-- placement 弹出位置 -->\n                    <!-- trigger 触发条件 -->\n                    <!-- content 弹出框内容 -->\n                    <el-popover\n                        placement=\"right\"\n                        :width=\"200\"\n                        trigger=\"hover\"\n                        :content=\"key + ':' + val\">\n                      <template #reference>\n                        <!-- ellipsis方法用于剪裁字符串 -->\n                        <el-tag style=\"margin-bottom: 5px\" type=\"warning\">{{ ellipsis(key + \":\" + val) }}</el-tag>\n                      </template>\n                    </el-popover>\n                  </div>\n                </template>\n              </el-table-column>\n              <!-- 容器组 -->\n              <el-table-column align=center label=\"容器组\">\n                <!-- 可用数量/总数量,三元运算，若值大于0则显示值，否则显示0 -->\n                <template v-slot=\"scope\">\n                  <span>{{ scope.row.status.availableReplicas>0?scope.row.status.availableReplicas:0  }} / {{ scope.row.spec.replicas>0?scope.row.spec.replicas:0 }} </span>\n                </template>\n              </el-table-column>\n              <!-- 创建时间 -->\n              <el-table-column align=center min-width=\"100\" label=\"创建时间\">\n                <!-- timeTrans函数用于将格林威治时间转成北京时间 -->\n                <template v-slot=\"scope\">\n                  <el-tag type=\"info\">{{ timeTrans(scope.row.metadata.creationTimestamp) }} </el-tag>\n                </template>\n              </el-table-column>\n              <!-- 容器镜像 -->\n              <el-table-column align=center label=\"镜像\">\n                <!-- 与label的显示逻辑一致 -->\n                <template v-slot=\"scope\">\n                  <div v-for=\"(val, key) in scope.row.spec.template.spec.containers\" :key=\"key\">\n                    <el-popover\n                        placement=\"right\"\n                        :width=\"200\"\n                        trigger=\"hover\"\n                        :content=\"val.image\">\n                      <template #reference>\n                        <el-tag style=\"margin-bottom: 5px\">{{ ellipsis(val.image.split('/')[2]==undefined?val.image:val.image.split('/')[2]) }}</el-tag>\n                      </template>\n                    </el-popover>\n                  </div>\n                </template>\n              </el-table-column>\n              <!-- 操作列，放按钮 -->\n              <el-table-column align=center label=\"操作\" width=\"400\">\n                <template v-slot=\"scope\">\n                  <el-button size=\"small\" style=\"border-radius:2px;\" icon=\"Edit\" type=\"primary\" plain @click=\"getDeploymentDetail(scope)\">YAML</el-button>\n                  <el-button size=\"small\" style=\"border-radius:2px;\" icon=\"Plus\" type=\"primary\" @click=\"handleScale(scope)\">扩缩</el-button>\n                  <el-button size=\"small\" style=\"border-radius:2px;\" icon=\"RefreshLeft\" type=\"primary\" @click=\"handleConfirm(scope, '重启', restartDeployment)\">重启</el-button>\n                  <el-button size=\"small\" style=\"border-radius:2px;\" icon=\"Delete\" type=\"danger\" @click=\"handleConfirm(scope, '删除', delDeployment)\">删除</el-button>\n                </template>\n              </el-table-column>\n            </el-table>\n            <!-- 分页配置 -->\n            <!-- background 背景色灰 -->\n            <!-- size-change 单页大小改变后触发 -->\n            <!-- current-change 页数改变后触发 -->\n            <!-- current-page 当前页 -->\n            <!-- page-size 单页大小 -->\n            <!-- layout 分页器支持的功能 -->\n            <!-- total 数据总条数 -->\n            <el-pagination\n                class=\"deploy-body-pagination\"\n                background\n                @size-change=\"handleSizeChange\"\n                @current-change=\"handleCurrentChange\"\n                :current-page=\"currentPage\"\n                :page-sizes=\"pagesizeList\"\n                :page-size=\"pagesize\"\n                layout=\"total, sizes, prev, pager, next, jumper\"\n                :total=\"deploymentTotal\">\n            </el-pagination>\n          </el-card>\n        </div>\n      </el-col>\n    </el-row>\n    <!-- 抽屉：创建Deployment的表单 -->\n    <!-- v-model 值是bool，用于显示与隐藏 -->\n    <!-- direction 显示的位置 -->\n    <!-- before-close 关闭时触发，点击关闭或者点击空白都会触发 -->\n    <el-drawer\n        v-model=\"createDeploymentDrawer\"\n        :direction=\"direction\"\n        :before-close=\"handleClose\">\n      <!-- 插槽，抽屉标题 -->\n      <template #title>\n        <h4>创建Deployment</h4>\n      </template>\n      <!-- 插槽，抽屉body -->\n      <template #default>\n        <!-- flex布局,居中 -->\n        <el-row type=\"flex\" justify=\"center\">\n          <el-col :span=\"20\">\n            <!-- ref绑定控件后，js中才能用this.$ref获取该控件 -->\n            <!-- rules 定义form表单校验规则 -->\n            <el-form ref=\"createDeployment\" :rules=\"createDeploymentRules\" :model=\"createDeployment\" label-width=\"80px\">\n              <!-- prop用于rules中的校验规则的key -->\n              <el-form-item class=\"deploy-create-form\" label=\"名称\" prop=\"name\">\n                <el-input v-model=\"createDeployment.name\"></el-input>\n              </el-form-item>\n              <el-form-item class=\"deploy-create-form\" label=\"命名空间\" prop=\"namespace\">\n                <el-select v-model=\"createDeployment.namespace\" filterable placeholder=\"请选择\">\n                  <el-option\n                      v-for=\"(item, index) in namespaceList\"\n                      :key=\"index\"\n                      :label=\"item.metadata.name\"\n                      :value=\"item.metadata.name\">\n                  </el-option>\n                </el-select>\n              </el-form-item>\n              <!-- 数字输入框，最小为1，最大为10 -->\n              <el-form-item class=\"deploy-create-form\" label=\"副本数\" prop=\"replicas\">\n                <el-input-number v-model=\"createDeployment.replicas\" :min=\"1\" :max=\"10\"></el-input-number>\n                <!-- 气泡弹出框用于提醒上限 -->\n                <el-popover\n                    placement=\"top\"\n                    :width=\"100\"\n                    trigger=\"hover\"\n                    content=\"申请副本数上限为10个\">\n                  <template #reference>\n                    <el-icon style=\"width:2em;font-size:18px;color:#4795EE\"><WarningFilled/></el-icon>\n                  </template>\n                </el-popover>\n              </el-form-item>\n              <el-form-item class=\"deploy-create-form\" label=\"镜像\" prop=\"image\">\n                <el-input v-model=\"createDeployment.image\"></el-input>\n              </el-form-item>\n              <el-form-item class=\"deploy-create-form\" label=\"标签\" prop=\"label_str\">\n                <el-input v-model=\"createDeployment.label_str\" placeholder=\"示例: project=ms,app=gateway\"></el-input>\n              </el-form-item>\n              <!-- 下拉框，用于规格的选择，之后用/分割，得到cpu和内存 -->\n              <el-form-item class=\"deploy-create-form\" label=\"资源配额\" prop=\"resource\">\n                <el-select v-model=\"createDeployment.resource\" placeholder=\"请选择\">\n                  <el-option value=\"0.5/1\" label=\"0.5C1G\"></el-option>\n                  <el-option value=\"1/2\" label=\"1C2G\"></el-option>\n                  <el-option value=\"2/4\" label=\"2C4G\"></el-option>\n                  <el-option value=\"4/8\" label=\"4C8G\"></el-option>\n                </el-select>\n              </el-form-item>\n              <el-form-item class=\"deploy-create-form\" label=\"容器端口\" prop=\"container_port\">\n                <el-input v-model=\"createDeployment.container_port\" placeholder=\"示例: 80\"></el-input>\n              </el-form-item>\n              <el-form-item class=\"deploy-create-form\" label=\"健康检查\" prop=\"health\">\n                <el-switch v-model=\"createDeployment.health_check\" />\n              </el-form-item>\n              <el-form-item class=\"deploy-create-form\" label=\"检查路径\" prop=\"healthPath\">\n                <el-input v-model=\"createDeployment.health_path\" placeholder=\"示例: /health\"></el-input>\n              </el-form-item>\n            </el-form>\n          </el-col>\n        </el-row>\n      </template>\n      <!-- 插槽，抽屉footer -->\n      <template #footer>\n        <!-- 点击后赋值false，隐藏抽屉 -->\n        <el-button @click=\"createDeploymentDrawer = false\">取消</el-button>\n        <el-button type=\"primary\" @click=\"submitForm('createDeployment')\">立即创建</el-button>\n      </template>\n    </el-drawer>\n    <!-- 展示YAML信息的弹框 -->\n    <el-dialog title=\"YAML信息\" v-model=\"yamlDialog\" width=\"45%\" top=\"2%\">\n      <!-- codemirror编辑器 -->\n      <!-- border 带边框 -->\n      <!-- options  编辑器配置 -->\n      <!-- change 编辑器中的内容变化时触发 -->\n      <codemirror\n          v-model:value=\"contentYaml\"\n          border\n          :options=\"cmOptions\"\n          :style=\"{ height: '500px' }\"\n          :autofocus=\"true\"\n          :tab-size=\"2\"\n          @change=\"onChange\"\n      ></codemirror>\n      <template #footer>\n                <span class=\"dialog-footer\">\n                    <el-button @click=\"this.yamlDialog = false\">取 消</el-button>\n                    <el-button type=\"primary\" @click=\"updateDeployment()\">更 新</el-button>\n                </span>\n      </template>\n    </el-dialog>\n    <!-- 调整副本数的弹框 -->\n    <el-dialog title=\"副本数调整\" v-model=\"scaleDialog\" width=\"25%\">\n      <div style=\"text-align:center\">\n        <span>实例数: </span>\n        <el-input-number :step=\"1\" v-model=\"scaleNum\" :min=\"0\" :max=\"30\" label=\"描述文字\"></el-input-number>\n      </div>\n      <template #footer>\n                <span class=\"dialog-footer\">\n                    <el-button @click=\"scaleDialog = false\">取 消</el-button>\n                    <el-button type=\"primary\" @click=\"scaleDeployment()\">更 新</el-button>\n                </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport common from \"../common/Config\";\nimport yaml2obj from 'js-yaml';\nimport json2yaml from 'json2yaml';\nimport {\n  createDeployment, deleteDeployment,\n  getdeploymentdetail,\n  getdeploymentlist,\n  restartdeployment,\n  scaledeployment,\n  updatedeployment\n} from \"@/api/deployment\";\nimport {getNamespecelist} from \"@/api/namespace\";\n\n\n\nexport default {\n  data() {\n    return {\n      //编辑器配置\n      cmOptions: {\n        // 语言及语法模式\n        mode: 'text/yaml',\n        // 主题\n        theme: 'darcula',\n        // 显示行数\n        lineNumbers: true,\n        smartIndent: true, //智能缩进\n        indentUnit: 4, // 智能缩进单元长度为 4 个空格\n        styleActiveLine: true, // 显示选中行的样式\n        matchBrackets: true, //每当光标位于匹配的方括号旁边时，都会使其高亮显示\n        readOnly: false,\n        lineWrapping: true //自动换行\n      },\n      contentYaml: '',\n      //分页\n      currentPage: 1,\n      pagesize: 10,\n      pagesizeList: [10, 20, 30],\n      //搜索框内容\n      searchInput: '',\n      //命名空间\n      namespaceValue: 'default',\n      namespaceList: [],\n      //列表\n      appLoading: false,\n      deploymentList: [],\n      deploymentTotal: 0,\n      getDeploymentsData: {\n        url: common.k8sDeploymentList,\n        params: {\n          filter_name: '',\n          namespace: '',\n          page: '',\n          limit: '',\n        }\n      },\n      //创建\n      fullscreenLoading: false,\n      direction: 'rtl',\n      createDeploymentDrawer: false,\n      createDeployment: {\n        name: '',\n        namespace: '',\n        replicas: 1,\n        image: '',\n        resource: '',\n        health_check: false,\n        health_path: '',\n        label_str: '',\n        label: {},\n        container_port: ''\n      },\n      //创建请求的参数\n      createDeploymentData: {\n        url: common.k8sDeploymentCreate,\n        params: {}\n      },\n      //创建deployment的表单校验规则\n      createDeploymentRules: {\n        name: [{\n          required: true,\n          message: '请填写名称',\n          trigger: 'change'\n        }],\n        image: [{\n          required: true,\n          message: '请填写镜像',\n          trigger: 'change'\n        }],\n        namespace: [{\n          required: true,\n          message: '请选择命名空间',\n          trigger: 'change'\n        }],\n        resource: [{\n          required: true,\n          message: '请选择配额',\n          trigger: 'change'\n        }],\n        label_str: [{\n          required: true,\n          message: '请填写标签',\n          trigger: 'change'\n        }],\n        container_port: [{\n          required: true,\n          message: '请填写容器端口',\n          trigger: 'change'\n        }],\n      },\n      //详情\n      deploymentDetail: {},\n      getDeploymentDetailData: {\n        params: {\n          deployment_name: '',\n          namespace: ''\n        }\n      },\n      //yaml更新\n      yamlDialog: false,\n      updateDeploymentData: {\n        params: {\n          namespace: '',\n          content: ''\n        }\n      },\n      //扩缩容\n      scaleNum: 0,\n      scaleDialog: false,\n      scaleDeploymentData: {\n        params: {\n          deployment_name: '',\n          namespace: '',\n          scale_num: ''\n        }\n      },\n      //重启\n      restartDeploymentData: {\n        params: {\n          deployment_name: '',\n          namespace: '',\n        }\n      },\n      //删除\n      delDeploymentData: {\n        params: {\n          deployment_name: '',\n          namespace: '',\n        }\n      },\n    }\n  },\n  methods: {\n    //json转yaml方法\n    transYaml(content) {\n      return json2yaml.stringify(content)\n    },\n    //yaml转对象\n    transObj(content) {\n      return yaml2obj.load(content)\n    },\n    //编辑器内容变化时触发的方式,用于将更新的内容复制到变量中\n    onChange(val) {\n      this.contentYaml = val\n    },\n    //页面大小发生变化时触发，赋值并重新获取列表\n    handleSizeChange(size) {\n      this.pagesize = size;\n      this.getDeployments()\n    },\n    //页数发生变化时触发，复制并重新获取列表\n    handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.getDeployments()\n    },\n    //处理抽屉的关闭，增加体验感\n    handleClose(done) {\n      this.$confirm('确认关闭？')\n          .then(() => {\n            done();\n          })\n          .catch(() => {});\n    },\n    //字符串截取、拼接并返回\n    ellipsis(value) {\n      return value.length>15?value.substring(0,15)+'...':value\n    },\n    //格林威治时间转为北京时间\n    timeTrans(timestamp) {\n      let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000)\n      date = date.toJSON();\n      date = date.substring(0, 19).replace('T', ' ')\n      return date\n    },\n    //获取Namespace列表\n    getNamespaces() {\n      getNamespecelist().then(res => {\n            this.namespaceList = res.data.items\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n    },\n    //获取Deployment列表\n    getDeployments() {\n      //表格加载动画开启\n      this.appLoading = true\n      //getDeploymentsData是用于发起deployment列表请求的专用的对象，里面有url和params参数,以下是赋值\n      this.getDeploymentsData.params.filter_name = this.searchInput\n      this.getDeploymentsData.params.namespace = this.namespaceValue\n      this.getDeploymentsData.params.page = this.currentPage\n      this.getDeploymentsData.params.limit = this.pagesize\n      getdeploymentlist(this.getDeploymentsData.params).then(res => {\n            //响应成功，获取deployment列表和total\n            this.deploymentList = res.data.items\n            this.deploymentTotal = res.data.total\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n      //加载动画关闭\n      this.appLoading = false\n    },\n    //获取deployment详情，e参数标识传入的scope插槽，.row是该行的数据\n    getDeploymentDetail(e) {\n      this.getDeploymentDetailData.params.deployment_name = e.row.metadata.name\n      this.getDeploymentDetailData.params.namespace = this.namespaceValue\n      getdeploymentdetail(this.getDeploymentDetailData.params).then(res => {\n            //响应成功，获得deployment详情\n            this.deploymentDetail = res.data\n            //将对象转成yaml格式的字符串\n            this.contentYaml = this.transYaml(this.deploymentDetail)\n        console.log(this.contentYaml)\n            //打开弹出框\n            this.yamlDialog = true\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n    },\n    //更新deployment\n    updateDeployment() {\n      //将yaml格式的deployment对象转为json\n      let content = JSON.stringify(this.transObj(this.contentYaml))\n      this.updateDeploymentData.params.namespace = this.namespaceValue\n      this.updateDeploymentData.params.content = content\n      updatedeployment(this.updateDeploymentData.params)\n          .then(res => {\n            this.$message.success({\n              message: res.msg\n            })\n            //更新后重新获取列表\n            this.getDeployments()\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n      //关闭弹出框\n      this.yamlDialog = false\n    },\n    //扩缩容的中间方法，用于赋值及打开弹出框\n    handleScale(e) {\n      this.scaleDialog = true\n      this.deploymentDetail = e.row\n      this.scaleNum = e.row.spec.replicas\n    },\n    //扩缩容deployment\n    scaleDeployment() {\n      this.scaleDeploymentData.params.deployment_name = this.deploymentDetail.metadata.name\n      this.scaleDeploymentData.params.namespace = this.namespaceValue\n      this.scaleDeploymentData.params.scale_num = this.scaleNum\n      scaledeployment(this.scaleDeploymentData.params)\n          .then(res => {\n            this.$message.success({\n              message: res.msg\n            })\n            //更新后重新获取列表\n            this.getDeployments()\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n      //关闭弹出框\n      this.scaleDialog = false\n    },\n    //重启deployment\n    restartDeployment(e) {\n      this.restartDeploymentData.params.deployment_name = e.row.metadata.name\n      this.restartDeploymentData.params.namespace = this.namespaceValue\n      restartdeployment(this.restartDeploymentData.params)\n          .then(res => {\n            this.$message.success({\n              message: res.msg\n            })\n            this.getDeployments()\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n    },\n    //删除deployment\n    delDeployment(e) {\n      this.delDeploymentData.params.deployment_name = e.row.metadata.name\n      this.delDeploymentData.params.namespace = this.namespaceValue\n      deleteDeployment(this.delDeploymentData.params)\n          .then(res => {\n            this.$message.success({\n              message: res.msg\n            })\n            this.getDeployments()\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n    },\n    //弹出确认框，用于危险操作的double check\n    //obj是行数据，opeateName是操作名，fn是操作的方法\n    handleConfirm(obj, operateName, fn) {\n      this.confirmContent = '确认继续 ' + operateName + ' 操作吗？'\n      //$confirm用于弹出确认框\n      this.$confirm(this.confirmContent,'提示',{\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n      })\n          .then(() => {\n            fn(obj)\n          })\n          .catch(() => {\n            this.$message.info({\n              message: '已取消操作'\n            })\n          })\n    },\n    //创建deployment，加Func的原因是因为createDeploy用于属性了\n    createDeployFunc() {\n      //正则匹配，验证label的合法性\n      let reg = new RegExp(\"(^[A-Za-z]+=[A-Za-z0-9]+).*\")\n      if (!reg.test(this.createDeployment.label_str)) {\n        this.$message.warning({\n          message: \"标签填写异常，请确认后重新填写\"\n        })\n        return\n      }\n      //加载loading动画\n      this.fullscreenLoading = true\n      //定义label、cpu和memory变量\n      let label = new Map()\n      let cpu, memory\n      //将label字符串转成数组\n      let a = (this.createDeployment.label_str).split(\",\")\n      //将数组转成map\n      a.forEach(item => {\n        let b = item.split(\"=\")\n        label[b[0]] = b[1]\n      })\n      //将deployment的规格转成cpu和memory\n      let resourceList = this.createDeployment.resource.split(\"/\")\n      cpu = resourceList[0]\n      memory = resourceList[1] + \"Gi\"\n      //赋值\n      this.createDeploymentData.params = this.createDeployment\n      this.createDeploymentData.params.container_port = parseInt(this.createDeployment.container_port)\n      this.createDeploymentData.params.label = label\n      this.createDeploymentData.params.cpu = cpu\n      this.createDeploymentData.params.memory = memory\n      createDeployment(this.createDeploymentData.params)\n          .then(res => {\n            this.$message.success({\n              message: res.msg\n            })\n            //创建后重新获取列表\n            this.getDeployments()\n          })\n          .catch(res => {\n            this.$message.error({\n              message: res.msg\n            })\n          })\n      //重置表单\n      this.resetForm('createDeployment')\n      //关闭加载动画\n      this.fullscreenLoading = false\n      //关闭抽屉\n      this.createDeploymentDrawer = false\n    },\n    //重置表单方法，element plus课程讲过的\n    resetForm(formName) {\n      this.$refs[formName].resetFields()\n    },\n    //提交表单，校验参数合法性\n    submitForm(formName) {\n      this.$refs[formName].validate((valid) => {\n        if (valid) {\n          this.createDeployFunc()\n        } else {\n          return false;\n        }\n      })\n    }\n  },\n  watch: {\n    //监听namespace的值,若发生变化，则执行handler方法中的内容\n    namespaceValue: {\n      handler() {\n        //将namespace的值存入本地，用于path切换时依旧能获取得到\n        localStorage.setItem('namespace', this.namespaceValue)\n        //重置当前页为1\n        this.currentPage = 1\n        //获取deployment列表\n        this.getDeployments()\n      }\n    },\n  },\n  beforeMount() {\n    //加载页面时先获取localStorage中的namespace值，若获取不到则默认default\n    if (localStorage.getItem('namespace') !== undefined && localStorage.getItem('namespace') !== null) {\n      this.namespaceValue = localStorage.getItem('namespace')\n    }\n    this.getNamespaces()\n    this.getDeployments()\n  }\n}\n</script>\n\n\n<style scoped>\n/* 卡片属性 */\n.deploy-head-card,.deploy-body-card {\n  border-radius: 1px;\n  margin-bottom: 5px;\n}\n/* 搜索框 */\n.deploy-head-search {\n  width:160px;\n  margin-right:10px;\n}\n/* 数据表格deployment名颜色 */\n.deploy-body-deployname {\n  color: #4795EE;\n}\n/* deployment名鼠标悬停 */\n.deploy-body-deployname:hover {\n  color: rgb(84, 138, 238);\n  cursor: pointer;\n  font-weight: bold;\n}\n</style>"]},"metadata":{},"sourceType":"module"}