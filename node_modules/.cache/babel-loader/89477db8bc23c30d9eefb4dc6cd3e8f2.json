{"ast":null,"code":"import { getNamespecelist } from \"@/api/namespace\";\nimport { CreateWorkflow, DeleteWorkflow, GetWorkflow } from \"@/api/workflow\";\nexport default {\n  data() {\n    return {\n      //工作流以及3个抽屉弹出框\n      active: 0,\n      createWorkflowDrawerIndex1: false,\n      createWorkflowDrawerIndex2_1: false,\n      createWorkflowDrawerIndex2_2: false,\n      //分页\n      currentPage: 1,\n      pagesize: 10,\n      pagesizeList: [10, 20, 30],\n      //搜索及命名空间\n      searchInput: '',\n      namespaceValue: 'default',\n      namespaceList: [],\n      //列表\n      appLoading: false,\n      workflowList: [],\n      workflowTotal: 0,\n      getWorkflowsData: {\n        params: {\n          name: '',\n          namespace: '',\n          page: '',\n          limit: ''\n        }\n      },\n      //创建\n      fullscreenLoading: false,\n      direction: 'rtl',\n      createWorkflowDrawer: false,\n      createWorkflow: {\n        name: '',\n        namespace: '',\n        deployment: '',\n        replicas: 1,\n        image: '',\n        resource: '',\n        health_check: false,\n        health_path: '',\n        label_str: '',\n        label: {},\n        container_port: '',\n        type: '',\n        port: '',\n        node_port: '',\n        host: '',\n        path: '',\n        path_type: ''\n      },\n      createWorkflowData: {\n        params: {}\n      },\n      createWorkflowRules: {\n        name: [{\n          required: true,\n          message: '请填写名称',\n          trigger: 'change'\n        }],\n        image: [{\n          required: true,\n          message: '请填写镜像',\n          trigger: 'change'\n        }],\n        namespace: [{\n          required: true,\n          message: '请选择命名空间',\n          trigger: 'change'\n        }],\n        resource: [{\n          required: true,\n          message: '请选择配额',\n          trigger: 'change'\n        }],\n        label_str: [{\n          required: true,\n          message: '请填写标签',\n          trigger: 'change'\n        }],\n        container_port: [{\n          required: true,\n          message: '请填写容器端口',\n          trigger: 'change'\n        }],\n        type: [{\n          required: true,\n          message: '请填写工作流类型',\n          trigger: 'change'\n        }],\n        port: [{\n          required: true,\n          message: '请填写Workflow端口',\n          trigger: 'change'\n        }],\n        node_port: [{\n          required: true,\n          message: '请填写NodePort',\n          trigger: 'change'\n        }],\n        host: [{\n          required: true,\n          message: '请填写域名',\n          trigger: 'change'\n        }],\n        path: [{\n          required: true,\n          message: '请填写路径',\n          trigger: 'change'\n        }],\n        path_type: [{\n          required: true,\n          message: '你选择匹配类型',\n          trigger: 'change'\n        }]\n      },\n      //删除\n      delWorkflowData: {\n        params: {\n          id: ''\n        }\n      }\n    };\n  },\n\n  methods: {\n    handleSizeChange(size) {\n      this.pagesize = size;\n      this.getWorkflows();\n    },\n\n    handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.getWorkflows();\n    },\n\n    handleClose(done) {\n      this.$confirm('确认关闭？').then(() => {\n        done();\n      }).catch(() => {});\n      this.active = 0;\n    },\n\n    //关闭抽屉\n    drawerCancel(drawerName) {\n      switch (drawerName) {\n        case 'createWorkflowDrawerIndex1':\n          this.createWorkflowDrawerIndex1 = false;\n          break;\n\n        case 'createWorkflowDrawerIndex2_1':\n          this.createWorkflowDrawerIndex2_1 = false;\n          break;\n\n        case 'createWorkflowDrawerIndex2_2':\n          this.createWorkflowDrawerIndex2_2 = false;\n      }\n\n      this.active = 0;\n    },\n\n    ellipsis(value) {\n      return value.length > 15 ? value.substring(0, 15) + '...' : value;\n    },\n\n    timeTrans(timestamp) {\n      let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000);\n      date = date.toJSON();\n      date = date.substring(0, 19).replace('T', ' ');\n      return date;\n    },\n\n    timeTransNot8(timestamp) {\n      let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000);\n      date = date.toJSON();\n      date = date.substring(0, 19).replace('T', ' ');\n      return date;\n    },\n\n    getNamespaces() {\n      getNamespecelist().then(res => {\n        this.namespaceList = res.data.items;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    getWorkflows() {\n      this.appLoading = true;\n      this.getWorkflowsData.params.name = this.searchInput;\n      this.getWorkflowsData.params.namespace = this.namespaceValue;\n      this.getWorkflowsData.params.page = this.currentPage;\n      this.getWorkflowsData.params.limit = this.pagesize;\n      GetWorkflow(this.getWorkflowsData.params).then(res => {\n        this.workflowList = res.data.items;\n        this.workflowTotal = res.data.total;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n      this.appLoading = false;\n    },\n\n    delWorkflow(e) {\n      this.delWorkflowData.params.id = e.row.id;\n      DeleteWorkflow(this.delWorkflowData.params).then(res => {\n        this.getWorkflows();\n        this.$message.success({\n          message: res.msg\n        });\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    handleConfirm(obj, operateName, fn) {\n      this.confirmContent = '确认继续 ' + operateName + ' 操作吗？';\n      this.$confirm(this.confirmContent, '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消'\n      }).then(() => {\n        fn(obj);\n      }).catch(() => {\n        this.$message.info({\n          message: '已取消操作'\n        });\n      });\n    },\n\n    //真正的创建workflow的方法\n    createWorkflowFunc() {\n      //验证标签,如果不符合a=b,c=d的格式，咱返回\n      let reg = new RegExp(\"(^[A-Za-z]+=[A-Za-z0-9]+).*\");\n\n      if (!reg.test(this.createWorkflow.label_str)) {\n        this.$message.warning({\n          message: \"标签填写异常，请确认后重新填写\"\n        });\n        return;\n      } //加载动画开启\n\n\n      this.fullscreenLoading = true; //处理标签,将标签转成map   a=b  ->  map[a]=b\n\n      let label = new Map();\n      let cpu, memory;\n      let a = this.createWorkflow.label_str.split(\",\");\n      a.forEach(item => {\n        let b = item.split(\"=\");\n        label[b[0]] = b[1];\n      }); //处理配额\n\n      let resourceList = this.createWorkflow.resource.split(\"/\");\n      cpu = resourceList[0];\n      memory = resourceList[1] + \"Gi\"; //处理其他参数\n\n      this.createWorkflowData.params = this.createWorkflow;\n      this.createWorkflowData.params.label = label;\n      this.createWorkflowData.params.cpu = cpu;\n      this.createWorkflowData.params.memory = memory;\n      this.createWorkflowData.params.container_port = parseInt(this.createWorkflow.container_port);\n      this.createWorkflowData.params.port = parseInt(this.createWorkflow.port);\n      this.createWorkflowData.params.node_port = parseInt(this.createWorkflow.node_port);\n      this.createWorkflowData.params.deployment = this.createWorkflow.name; //处理Hosts及httppath，跟后端处理相同，将数据转成map[host]=httpPaths的格式\n\n      if (this.createWorkflow.type == 'Ingress') {\n        let hosts = new Map();\n        let httpPaths = [];\n        let httpPath = {\n          path: this.createWorkflow.path,\n          path_type: this.createWorkflow.path_type,\n          service_name: this.createWorkflow.name,\n          service_port: parseInt(this.createWorkflow.port)\n        };\n        httpPaths.push(httpPath);\n        hosts[this.createWorkflow.host] = httpPaths;\n        this.createWorkflowData.params.hosts = hosts;\n      } //发送请求\n\n\n      CreateWorkflow(this.createWorkflowData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        });\n        this.getWorkflows();\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n      this.resetForm('createWorkflow');\n      this.createWorkflowDrawerIndex2_2 = false;\n      this.active = 3;\n      this.fullscreenLoading = false;\n    },\n\n    resetForm(formName) {\n      this.$refs[formName].resetFields();\n    },\n\n    //抽屉2_2提交\n    submitForm(formName, fn) {\n      this.$refs[formName].validate(valid => {\n        if (valid) {\n          fn();\n        } else {\n          return false;\n        }\n      });\n    },\n\n    //抽屉1的提交\n    workflowIndex1Next() {\n      //判断是否选择了type\n      if (!this.createWorkflow.type) {\n        this.$message.warning({\n          message: \"请选择工作流类型\"\n        });\n        return;\n      } //关闭抽屉1\n\n\n      this.createWorkflowDrawerIndex1 = false; //打开抽屉2_1\n\n      this.createWorkflowDrawerIndex2_1 = true; //步骤条完成第一步\n\n      this.active = 1;\n    },\n\n    //抽屉2的提交\n    workflowIndex2_1Next() {\n      //关闭抽屉2_1\n      this.createWorkflowDrawerIndex2_1 = false; //打开抽屉2_2\n\n      this.createWorkflowDrawerIndex2_2 = true;\n    }\n\n  },\n  watch: {\n    namespaceValue: {\n      handler() {\n        localStorage.setItem('namespace', this.namespaceValue);\n        this.currentPage = 1;\n        this.getWorkflows();\n      }\n\n    }\n  },\n\n  beforeMount() {\n    if (localStorage.getItem('namespace') !== undefined && localStorage.getItem('namespace') !== null) {\n      this.namespaceValue = localStorage.getItem('namespace');\n    }\n\n    this.getNamespaces();\n    this.getWorkflows();\n  }\n\n};","map":{"version":3,"mappings":"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","names":["getNamespecelist","CreateWorkflow","DeleteWorkflow","GetWorkflow","data","active","createWorkflowDrawerIndex1","createWorkflowDrawerIndex2_1","createWorkflowDrawerIndex2_2","currentPage","pagesize","pagesizeList","searchInput","namespaceValue","namespaceList","appLoading","workflowList","workflowTotal","getWorkflowsData","params","name","namespace","page","limit","fullscreenLoading","direction","createWorkflowDrawer","createWorkflow","deployment","replicas","image","resource","health_check","health_path","label_str","label","container_port","type","port","node_port","host","path","path_type","createWorkflowData","createWorkflowRules","required","message","trigger","delWorkflowData","id","methods","handleSizeChange","size","getWorkflows","handleCurrentChange","handleClose","done","$confirm","then","catch","drawerCancel","drawerName","ellipsis","value","length","substring","timeTrans","timestamp","date","Date","getTime","toJSON","replace","timeTransNot8","getNamespaces","res","items","$message","error","msg","total","delWorkflow","e","row","success","handleConfirm","obj","operateName","fn","confirmContent","confirmButtonText","cancelButtonText","info","createWorkflowFunc","reg","RegExp","test","warning","Map","cpu","memory","a","split","forEach","item","b","resourceList","parseInt","hosts","httpPaths","httpPath","service_name","service_port","push","resetForm","formName","$refs","resetFields","submitForm","validate","valid","workflowIndex1Next","workflowIndex2_1Next","watch","handler","localStorage","setItem","beforeMount","getItem","undefined"],"sourceRoot":"","sources":["/Users/allen/k8s-platform-fe/src/views/workflow/Workflow.vue"],"sourcesContent":["<template>\n    <div class=\"workflow\">\n        <el-row>\n            <!-- header1 -->\n            <el-col :span=\"24\">\n                <div>\n                    <el-card class=\"workflow-head-card\" shadow=\"never\" :body-style=\"{padding:'10px'}\">\n                        <el-row>\n                            <el-col :span=\"6\">\n                                <div>\n                                    <span>命名空间: </span>\n                                    <el-select v-model=\"namespaceValue\" filterable placeholder=\"请选择\">\n                                        <el-option\n                                        v-for=\"(item, index) in namespaceList\"\n                                        :key=\"index\"\n                                        :label=\"item.metadata.name\"\n                                        :value=\"item.metadata.name\">\n                                        </el-option>\n                                    </el-select>\n                                </div>\n                            </el-col>\n                            <el-col :span=\"2\" :offset=\"16\">\n                                <div>\n                                    <el-button style=\"border-radius:2px;\" icon=\"Refresh\" plain @click=\"getWorkflows()\">刷新</el-button>\n                                </div>\n                            </el-col>\n                        </el-row>\n                    </el-card>\n                </div>\n            </el-col>\n            <!-- header2 步骤条 -->\n            <el-col :span=\"24\">\n                <div>\n                    <!-- 步骤条展示，active属性控制到了哪一步 -->\n                    <el-card class=\"workflow-head-card\" shadow=\"never\" :body-style=\"{padding:'30px 10px 20px 10px'}\">\n                        <el-steps :active=\"active\" align-center finish-status=\"success\">\n                            <el-step title=\"步骤1\" description=\"选择工作流类型, ClusterIP NodePort Workflow\"></el-step>\n                            <el-step title=\"步骤2\" description=\"填写Deployment Workflow Workflow表单\"></el-step>\n                            <el-step title=\"步骤3\" description=\"创建Deployment Workflow Workflow\"></el-step>\n                        </el-steps>\n                    </el-card>\n                </div>\n            </el-col>\n            <!-- header3 -->\n            <el-col :span=\"24\">\n                <div>\n                    <el-card class=\"workflow-head-card\" shadow=\"never\" :body-style=\"{padding:'10px'}\">\n                        <el-row>\n                            <el-col :span=\"3\">\n                                <div>\n                                    <!-- 创建工作流 -->\n                                    <!-- createWorkflowDrawerIndex1-》createWorkflowDrawerIndex2-1-》createWorkflowDrawerIndex2-2 -->\n                                    <el-button style=\"border-radius:2px;\" icon=\"Edit\" type=\"primary\" @click=\"createWorkflowDrawerIndex1 = true\" v-loading.fullscreen.lock=\"fullscreenLoading\">创建工作流</el-button>\n                                </div>\n                            </el-col>\n                            <el-col :span=\"6\">\n                                <div>\n                                    <el-input class=\"workflow-head-search\" clearable placeholder=\"请输入\" v-model=\"searchInput\"></el-input>\n                                    <el-button style=\"border-radius:2px;\" icon=\"Search\" type=\"primary\" plain @click=\"getWorkflows()\">搜索</el-button>\n                                </div>\n                            </el-col>\n                        </el-row>\n                    </el-card>\n                </div>\n            </el-col>\n            <!-- 数据表格 -->\n            <el-col :span=\"24\">\n                <div>\n                    <el-card class=\"workflow-body-card\" shadow=\"never\" :body-style=\"{padding:'5px'}\">\n                        <el-table\n                        style=\"width:100%;font-size:12px;margin-bottom:10px;\"\n                        :data=\"workflowList\"\n                        v-loading=\"appLoading\">\n                            <el-table-column width=\"20\"></el-table-column>\n                            <el-table-column min-width=\"50\" align=left label=\"ID\" prop=\"id\"></el-table-column>\n                            <el-table-column min-width=\"100\" label=\"Workflow名\">\n                                <template v-slot=\"scope\">\n                                    <a class=\"workflow-body-workflowname\">{{ scope.row.name }}</a>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"类型\" prop=\"type\">\n                                <template v-slot=\"scope\">\n                                    <el-tag type=\"warning\">{{ scope.row.service_type }}</el-tag>\n                                </template>\n                            </el-table-column>\n                            <el-table-column label=\"实例数\" prop=\"replicas\"></el-table-column>\n                            <el-table-column min-width=\"100\" label=\"deployment\" prop=\"deployment\"></el-table-column>\n                            <el-table-column min-width=\"150\" label=\"service\" prop=\"service\"></el-table-column>\n                            <el-table-column min-width=\"150\" label=\"ingress\" prop=\"ingress\"></el-table-column>\n                            <el-table-column align=center min-width=\"150\" label=\"创建时间\">\n                                <template v-slot=\"scope\">\n                                    <el-tag type=\"info\">{{ timeTransNot8(scope.row.created_at) }} </el-tag>\n                                </template>\n                            </el-table-column>\n                            <el-table-column align=center label=\"操作\" width=\"200\">\n                                <template v-slot=\"scope\">\n                                    <el-button size=\"small\" disabled style=\"border-radius:2px;\" icon=\"Edit\" type=\"primary\" plain @click=\"getWorkflowDetail(scope)\">详情</el-button>\n                                    <el-button size=\"small\" style=\"border-radius:2px;\" icon=\"Delete\" type=\"danger\" @click=\"handleConfirm(scope, '删除', delWorkflow)\">删除</el-button>\n                                </template>\n                            </el-table-column>\n                        </el-table>\n                        <el-pagination\n                        class=\"workflow-body-pagination\"\n                        background\n                        @size-change=\"handleSizeChange\"\n                        @current-change=\"handleCurrentChange\"\n                        :current-page=\"currentPage\"\n                        :page-sizes=\"pagesizeList\"\n                        :page-size=\"pagesize\"\n                        layout=\"total, sizes, prev, pager, next, jumper\"\n                        :total=\"workflowTotal\">\n                        </el-pagination>\n                    </el-card>\n                </div>\n            </el-col>\n        </el-row>\n    <!-- 抽屉弹框1 -->\n    <el-drawer\n        v-model=\"createWorkflowDrawerIndex1\"\n        :direction=\"direction\"\n        :before-close=\"handleClose\">\n        <template #title>\n            <h4>创建Workflow-步骤1</h4>\n        </template>\n        <template #default>\n            <el-row type=\"flex\" justify=\"center\">\n                <el-col :span=\"20\">\n                    <el-form label-width=\"80px\">\n                        <el-form-item class=\"workflow-create-form\" label=\"类型\" prop=\"name\">\n                            <el-radio v-model=\"createWorkflow.type\" label=\"ClusterIP\">ClusterIP</el-radio>\n                            <el-radio v-model=\"createWorkflow.type\" label=\"NodePort\">NodePort</el-radio>\n                            <el-radio v-model=\"createWorkflow.type\" label=\"Ingress\">Ingress</el-radio>\n                        </el-form-item>\n                    </el-form>\n                </el-col>\n            </el-row>\n        </template>\n        <template #footer>\n            <el-button @click=\"drawerCancel('createWorkflowDrawerIndex1')\">取消</el-button>\n            <el-button type=\"primary\" @click=\"workflowIndex1Next()\">下一步</el-button>\n        </template>\n    </el-drawer>\n    <!-- 抽屉弹框2 -->\n    <el-drawer\n        v-model=\"createWorkflowDrawerIndex2_1\"\n        :direction=\"direction\"\n        :before-close=\"handleClose\">\n        <template #title>\n            <h4>创建Workflow-步骤2</h4>\n        </template>\n        <template #default>\n            <el-row type=\"flex\" justify=\"center\">\n                <el-col :span=\"20\">\n                    <el-form ref=\"createWorkflow\" :rules=\"createWorkflowRules\" :model=\"createWorkflow\" label-width=\"80px\">\n                        <h4 style=\"margin-bottom:10px\">Deployment</h4>\n                        <el-form-item class=\"workflow-create-form\" label=\"名称\" prop=\"name\">\n                            <el-input v-model=\"createWorkflow.name\"></el-input>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"命名空间\" prop=\"namespace\">\n                            <el-select v-model=\"createWorkflow.namespace\" filterable placeholder=\"请选择\">\n                                <el-option\n                                v-for=\"(item, index) in namespaceList\"\n                                :key=\"index\"\n                                :label=\"item.metadata.name\"\n                                :value=\"item.metadata.name\">\n                                </el-option>\n                            </el-select>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"副本数\" prop=\"replicas\">\n                            <el-input-number v-model=\"createWorkflow.replicas\" :min=\"1\" :max=\"10\"></el-input-number>\n                                <el-popover\n                                    placement=\"top\"\n                                    :width=\"100\"\n                                    trigger=\"hover\"\n                                    content=\"申请副本数上限为10个\">\n                                    <template #reference>\n                                        <el-icon style=\"width:2em;font-size:18px;color:#4795EE\"><WarningFilled/></el-icon>\n                                    </template>\n                                </el-popover>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"镜像\" prop=\"image\">\n                            <el-input v-model=\"createWorkflow.image\"></el-input>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"标签\" prop=\"label_str\">\n                            <el-input v-model=\"createWorkflow.label_str\" placeholder=\"示例: project=ms,app=gateway\"></el-input>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"资源配额\" prop=\"resource\">\n                            <el-select v-model=\"createWorkflow.resource\" placeholder=\"请选择\">\n                                <el-option value=\"0.5/1\" label=\"0.5C1G\"></el-option>\n                                <el-option value=\"1/2\" label=\"1C2G\"></el-option>\n                                <el-option value=\"2/4\" label=\"2C4G\"></el-option>\n                                <el-option value=\"4/8\" label=\"4C8G\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"容器端口\" prop=\"container_port\">\n                            <el-input v-model=\"createWorkflow.container_port\" placeholder=\"示例: 80\"></el-input>\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"健康检查\" prop=\"health\">\n                            <el-switch v-model=\"createWorkflow.health_check\" />\n                        </el-form-item>\n                        <el-form-item class=\"workflow-create-form\" label=\"检查路径\" prop=\"healthPath\">\n                            <el-input v-model=\"createWorkflow.health_path\" placeholder=\"示例: /health\"></el-input>\n                        </el-form-item>\n                    </el-form>\n                </el-col>\n            </el-row>\n        </template>\n        <template #footer>\n            <el-button @click=\"drawerCancel('createWorkflowDrawerIndex2_1')\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitForm('createWorkflow', workflowIndex2_1Next)\">下一步</el-button>\n        </template>\n    </el-drawer>\n    <!-- 抽屉弹框3 -->\n    <el-drawer\n        v-model=\"createWorkflowDrawerIndex2_2\"\n        :direction=\"direction\"\n        :before-close=\"handleClose\">\n        <template #title>\n            <h4>创建Workflow-步骤2</h4>\n        </template>\n        <template #default>\n            <el-row type=\"flex\" justify=\"center\">\n                <el-col :span=\"20\">\n                    <el-form ref=\"createWorkflow\" :rules=\"createWorkflowRules\" :model=\"createWorkflow\" label-width=\"80px\">\n                        <h4 style=\"margin-bottom:10px\">Service</h4>\n                        <el-form-item class=\"service-create-form\" label=\"Service端口\" prop=\"port\">\n                            <el-input v-model=\"createWorkflow.port\" placeholder=\"示例: 80\"></el-input>\n                        </el-form-item>\n                        <el-form-item v-if=\"createWorkflow.type == 'NodePort'\" class=\"service-create-form\" label=\"NodePort\" prop=\"node_port\">\n                            <el-input v-model=\"createWorkflow.node_port\" placeholder=\"示例: 30001\"></el-input>\n                        </el-form-item>\n                        <el-divider v-if=\"createWorkflow.type == 'Ingress'\"></el-divider>\n                        <h4 v-if=\"createWorkflow.type == 'Ingress'\" style=\"margin-bottom:10px\">Ingress</h4>\n                        <el-form-item v-if=\"createWorkflow.type == 'Ingress'\" class=\"deploy-create-form\" label=\"域名\" prop=\"host\">\n                            <el-input v-model=\"createWorkflow.host\" placeholder=\"示例: www.example.com\"></el-input>\n                        </el-form-item>\n                        <el-form-item v-if=\"createWorkflow.type == 'Ingress'\" class=\"ingress-create-form\" label=\"Path\" prop=\"path\">\n                            <el-input v-model=\"createWorkflow.path\" placeholder=\"示例: /abc\"></el-input>\n                        </el-form-item>\n                        <el-form-item v-if=\"createWorkflow.type == 'Ingress'\" class=\"deploy-create-form\" label=\"匹配类型\" prop=\"path_type\">\n                            <el-select v-model=\"createWorkflow.path_type\" placeholder=\"请选择\">\n                                <el-option value=\"Prefix\" label=\"Prefix\"></el-option>\n                                <el-option value=\"Exact\" label=\"Exact\"></el-option>\n                                <el-option value=\"ImplementationSpecific\" label=\"ImplementationSpecific\"></el-option>\n                            </el-select>\n                        </el-form-item>\n                    </el-form>\n                </el-col>\n            </el-row>\n        </template>\n        <template #footer>\n            <el-button @click=\"drawerCancel('createWorkflowDrawerIndex2_2')\">取消</el-button>\n            <el-button type=\"primary\" @click=\"submitForm('createWorkflow', createWorkflowFunc)\">立即创建</el-button>\n        </template>\n    </el-drawer>\n    </div>\n</template>\n\n<script>\nimport {getNamespecelist} from \"@/api/namespace\";\nimport {CreateWorkflow, DeleteWorkflow, GetWorkflow} from \"@/api/workflow\";\nexport default {\n    data() {\n        return {\n            //工作流以及3个抽屉弹出框\n            active: 0,\n            createWorkflowDrawerIndex1: false,\n            createWorkflowDrawerIndex2_1: false,\n            createWorkflowDrawerIndex2_2: false,\n            //分页\n            currentPage: 1,\n            pagesize: 10,\n            pagesizeList: [10, 20, 30],\n            //搜索及命名空间\n            searchInput: '',\n            namespaceValue: 'default',\n            namespaceList: [],\n            //列表\n            appLoading: false,\n            workflowList: [],\n            workflowTotal: 0,\n            getWorkflowsData: {\n                params: {\n                    name: '',\n                    namespace: '',\n                    page: '',\n                    limit: '',\n                }\n            },\n            //创建\n            fullscreenLoading: false,\n            direction: 'rtl',\n            createWorkflowDrawer: false,\n            createWorkflow: {\n                name: '',\n                namespace: '',\n               deployment: '',\n                replicas: 1,\n                image: '',\n                resource: '',\n                health_check: false,\n                health_path: '',\n                label_str: '',\n                label: {},\n                container_port: '',\n                type: '',\n                port: '',\n                node_port: '',\n                host: '',\n                path: '',\n                path_type: ''\n            },\n            createWorkflowData: {\n                params: {}\n            },\n            createWorkflowRules: {\n                name: [{\n                    required: true,\n                    message: '请填写名称',\n                    trigger: 'change'\n                }],\n                image: [{\n                    required: true,\n                    message: '请填写镜像',\n                    trigger: 'change'\n                }],\n                namespace: [{\n                    required: true,\n                    message: '请选择命名空间',\n                    trigger: 'change'\n                }],\n                resource: [{\n                    required: true,\n                    message: '请选择配额',\n                    trigger: 'change'\n                }],\n                label_str: [{\n                    required: true,\n                    message: '请填写标签',\n                    trigger: 'change'\n                }],\n                container_port: [{\n                    required: true,\n                    message: '请填写容器端口',\n                    trigger: 'change'\n                }],\n                type: [{\n                    required: true,\n                    message: '请填写工作流类型',\n                    trigger: 'change'\n                }],\n                port: [{\n                    required: true,\n                    message: '请填写Workflow端口',\n                    trigger: 'change'\n                }],\n                node_port: [{\n                    required: true,\n                    message: '请填写NodePort',\n                    trigger: 'change'\n                }],\n                host: [{\n                    required: true,\n                    message: '请填写域名',\n                    trigger: 'change'\n                }],\n                path: [{\n                    required: true,\n                    message: '请填写路径',\n                    trigger: 'change'\n                }],\n                path_type: [{\n                    required: true,\n                    message: '你选择匹配类型',\n                    trigger: 'change'\n                }],\n            },\n            //删除\n            delWorkflowData: {\n                params: {\n                    id: ''\n                }\n            },\n        }\n    },\n    methods: {\n        handleSizeChange(size) {\n            this.pagesize = size;\n            this.getWorkflows()\n        },\n        handleCurrentChange(currentPage) {\n            this.currentPage = currentPage;\n            this.getWorkflows()\n        },\n        handleClose(done) {\n            this.$confirm('确认关闭？')\n            .then(() => {\n                done();\n            })\n            .catch(() => {});\n            this.active = 0\n        },\n        //关闭抽屉\n        drawerCancel(drawerName) {\n            switch (drawerName) {\n                case 'createWorkflowDrawerIndex1':\n                    this.createWorkflowDrawerIndex1 = false\n                    break\n                case 'createWorkflowDrawerIndex2_1':\n                    this.createWorkflowDrawerIndex2_1 = false\n                    break\n                case 'createWorkflowDrawerIndex2_2':\n                    this.createWorkflowDrawerIndex2_2 = false\n            }\n            this.active = 0\n        },\n        ellipsis(value) {\n            return value.length>15?value.substring(0,15)+'...':value\n        },\n        timeTrans(timestamp) {\n            let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000)\n            date = date.toJSON();\n            date = date.substring(0, 19).replace('T', ' ')\n            return date \n        },\n        timeTransNot8(timestamp) {\n            let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000)\n            date = date.toJSON();\n            date = date.substring(0, 19).replace('T', ' ')\n            return date \n        },\n        getNamespaces() {\n          getNamespecelist().then(res => {\n                this.namespaceList = res.data.items\n            })\n            .catch(res => {\n                this.$message.error({\n                message: res.msg\n                })\n            })\n        },\n        getWorkflows() {\n            this.appLoading = true\n            this.getWorkflowsData.params.name = this.searchInput\n            this.getWorkflowsData.params.namespace = this.namespaceValue\n            this.getWorkflowsData.params.page = this.currentPage\n            this.getWorkflowsData.params.limit = this.pagesize\n          GetWorkflow(this.getWorkflowsData.params).then(res => {\n                this.workflowList = res.data.items\n                this.workflowTotal = res.data.total\n            })\n            .catch(res => {\n                this.$message.error({\n                message: res.msg\n                })\n            })\n            this.appLoading = false\n        },\n        delWorkflow(e) {\n            this.delWorkflowData.params.id = e.row.id\n          DeleteWorkflow(this.delWorkflowData.params)\n            .then(res => {\n                this.getWorkflows()\n                this.$message.success({\n                message: res.msg\n                })\n            })\n            .catch(res => {\n                this.$message.error({\n                message: res.msg\n                })\n            })\n        },\n        handleConfirm(obj, operateName, fn) {\n            this.confirmContent = '确认继续 ' + operateName + ' 操作吗？'\n            this.$confirm(this.confirmContent,'提示',{\n                confirmButtonText: '确定',\n                cancelButtonText: '取消',\n            })\n            .then(() => {\n                fn(obj)\n            })\n            .catch(() => {\n                this.$message.info({\n                    message: '已取消操作'\n                })          \n            })\n        },\n        //真正的创建workflow的方法\n        createWorkflowFunc() {\n            //验证标签,如果不符合a=b,c=d的格式，咱返回\n            let reg = new RegExp(\"(^[A-Za-z]+=[A-Za-z0-9]+).*\")\n            if (!reg.test(this.createWorkflow.label_str)) {\n                this.$message.warning({\n                    message: \"标签填写异常，请确认后重新填写\"\n                })\n                return\n            }\n            //加载动画开启\n            this.fullscreenLoading = true\n            //处理标签,将标签转成map   a=b  ->  map[a]=b\n            let label = new Map()\n            let cpu, memory\n            let a = (this.createWorkflow.label_str).split(\",\")\n            a.forEach(item => {\n                let b = item.split(\"=\")\n                label[b[0]] = b[1]\n            })\n            //处理配额\n            let resourceList = this.createWorkflow.resource.split(\"/\")\n            cpu = resourceList[0]\n            memory = resourceList[1] + \"Gi\"\n            //处理其他参数\n            this.createWorkflowData.params = this.createWorkflow\n            this.createWorkflowData.params.label = label\n            this.createWorkflowData.params.cpu = cpu\n            this.createWorkflowData.params.memory = memory\n            this.createWorkflowData.params.container_port = parseInt(this.createWorkflow.container_port)\n            this.createWorkflowData.params.port = parseInt(this.createWorkflow.port)\n            this.createWorkflowData.params.node_port = parseInt(this.createWorkflow.node_port)\n            this.createWorkflowData.params.deployment = this.createWorkflow.name\n            //处理Hosts及httppath，跟后端处理相同，将数据转成map[host]=httpPaths的格式\n            if (this.createWorkflow.type == 'Ingress') {\n                let hosts = new Map()\n                let httpPaths = []\n                let httpPath = {\n                    path: this.createWorkflow.path,\n                    path_type: this.createWorkflow.path_type,\n                    service_name: this.createWorkflow.name,\n                    service_port: parseInt(this.createWorkflow.port)\n                }\n                httpPaths.push(httpPath)\n                hosts[this.createWorkflow.host] = httpPaths\n                this.createWorkflowData.params.hosts = hosts\n            }\n            //发送请求\n          CreateWorkflow(this.createWorkflowData.params).then(res => {\n                this.$message.success({\n                message: res.msg\n                })\n                this.getWorkflows()\n            })\n            .catch(res => {\n                this.$message.error({\n                message: res.msg\n                })\n            })\n            this.resetForm('createWorkflow')\n            this.createWorkflowDrawerIndex2_2 = false\n            this.active = 3\n            this.fullscreenLoading = false\n        },\n        resetForm(formName) {\n            this.$refs[formName].resetFields()\n        },\n        //抽屉2_2提交\n        submitForm(formName, fn) {\n            this.$refs[formName].validate((valid) => {\n                if (valid) {\n                    fn()\n                } else {\n                    return false;\n                }\n            })\n        },\n        //抽屉1的提交\n        workflowIndex1Next() {\n            //判断是否选择了type\n            if (!this.createWorkflow.type) {\n                this.$message.warning({\n                    message: \"请选择工作流类型\"\n                })\n                return\n            }\n            //关闭抽屉1\n            this.createWorkflowDrawerIndex1 = false\n            //打开抽屉2_1\n            this.createWorkflowDrawerIndex2_1 = true\n            //步骤条完成第一步\n            this.active = 1\n        },\n        //抽屉2的提交\n        workflowIndex2_1Next() {\n            //关闭抽屉2_1\n            this.createWorkflowDrawerIndex2_1 = false\n            //打开抽屉2_2\n            this.createWorkflowDrawerIndex2_2 = true\n        }\n    },\n    watch: {\n        namespaceValue: {\n            handler() {\n                localStorage.setItem('namespace', this.namespaceValue)\n                this.currentPage = 1\n                this.getWorkflows()\n            }\n        },\n    },\n    beforeMount() {\n        if (localStorage.getItem('namespace') !== undefined && localStorage.getItem('namespace') !== null) {\n            this.namespaceValue = localStorage.getItem('namespace')\n        }\n        this.getNamespaces()\n        this.getWorkflows()\n    }\n}\n</script>\n\n\n<style scoped>\n    .workflow-head-card,.workflow-body-card {\n        border-radius: 1px;\n        margin-bottom: 5px;\n    }\n    .workflow-head-search {\n        width:160px;\n        margin-right:10px; \n    }\n    .workflow-body-workflowname {\n        color: #4795EE;\n    }\n    .workflow-body-workflowname:hover {\n        color: rgb(84, 138, 238);\n        cursor: pointer;\n        font-weight: bold;\n    }\n    /deep/ .el-drawer__header {\n        margin-bottom: 0px !important;\n    }\n    /deep/ .el-drawer__body {\n        padding: 0px 0px 0px 0px;\n    }\n</style>"]},"metadata":{},"sourceType":"module"}