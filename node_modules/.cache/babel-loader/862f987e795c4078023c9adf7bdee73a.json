{"ast":null,"code":"require(\"core-js/modules/es.error.cause.js\");\n\n/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function () {\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0; // Cost of an empty edit operation in terms of edit characters.\n\n  this.Diff_EditCost = 4; // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n\n  this.Match_Threshold = 0.5; // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n\n  this.Match_Distance = 1000; // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n\n  this.Patch_DeleteThreshold = 0.5; // Chunk size for context length.\n\n  this.Patch_Margin = 4; // The number of bits in an int.\n\n  this.Match_MaxBits = 32;\n}; //  DIFF FUNCTIONS\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\n\n\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\n\ndiff_match_patch.Diff = function (op, text) {\n  return [op, text];\n};\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_main = function (text1, text2, opt_checklines, opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = new Date().getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n\n  var deadline = opt_deadline; // Check for null inputs.\n\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  } // Check for equality (speedup).\n\n\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n\n  var checklines = opt_checklines; // Trim off common prefix (speedup).\n\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength); // Trim off common suffix (speedup).\n\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength); // Compute the diff on the middle block.\n\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline); // Restore the prefix and suffix.\n\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_compute_ = function (text1, text2, checklines, deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)), new diff_match_patch.Diff(DIFF_EQUAL, shorttext), new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(i + shorttext.length))]; // Swap insertions for deletions if diff is reversed.\n\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1), new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  } // Check to see if the problem can be split in two.\n\n\n  var hm = this.diff_halfMatch_(text1, text2);\n\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4]; // Send both pairs off for separate processing.\n\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline); // Merge the results.\n\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)], diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_lineMode_ = function (text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n  var diffs = this.diff_main(text1, text2, false, deadline); // Convert the diff back to original text.\n\n  this.diff_charsToLines_(diffs, linearray); // Eliminate freak matches (e.g. blank lines)\n\n  this.diff_cleanupSemantic(diffs); // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert, count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff = this.diff_main(text_delete, text_insert, false, deadline);\n\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n\n          pointer = pointer + subDiff.length;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n\n    pointer++;\n  }\n\n  diffs.pop(); // Remove the dummy entry at the end.\n\n  return diffs;\n};\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_bisect_ = function (text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length); // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length; // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n\n  var front = delta % 2 != 0; // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if (new Date().getTime() > deadline) {\n      break;\n    } // Walk the front path one step.\n\n\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n\n      if (k1 == -d || k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1]) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n\n      var y1 = x1 - k1;\n\n      while (x1 < text1_length && y1 < text2_length && text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n\n      v1[k1_offset] = x1;\n\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    } // Walk the reverse path one step.\n\n\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n\n      if (k2 == -d || k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1]) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n\n      var y2 = x2 - k2;\n\n      while (x2 < text1_length && y2 < text2_length && text1.charAt(text1_length - x2 - 1) == text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n\n      v2[k2_offset] = x2;\n\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset; // Mirror x2 onto top-left coordinate system.\n\n          x2 = text1_length - x2;\n\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  } // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n\n\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1), new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_bisectSplit_ = function (text1, text2, x, y, deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y); // Compute both diffs serially.\n\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n  return diffs.concat(diffsb);\n};\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_linesToChars_ = function (text1, text2) {\n  var lineArray = []; // e.g. lineArray[4] == 'Hello\\n'\n\n  var lineHash = {}; // e.g. lineHash['Hello\\n'] == 4\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n\n  lineArray[0] = '';\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n\n  function diff_linesToCharsMunge_(text) {\n    var chars = ''; // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n\n    var lineStart = 0;\n    var lineEnd = -1; // Keeping our own length variable is faster than looking it up.\n\n    var lineArrayLength = lineArray.length;\n\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) : lineHash[line] !== undefined) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n\n      lineStart = lineEnd + 1;\n    }\n\n    return chars;\n  } // Allocate 2/3rds of the space for text1, the rest for text2.\n\n\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {\n    chars1: chars1,\n    chars2: chars2,\n    lineArray: lineArray\n  };\n};\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_charsToLines_ = function (diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n\n    diffs[i][1] = text.join('');\n  }\n};\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\n\n\ndiff_match_patch.prototype.diff_commonPrefix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) == text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n};\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\n\n\ndiff_match_patch.prototype.diff_commonSuffix = function (text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  } // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n\n\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) == text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n\n  return pointermid;\n};\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_commonOverlap_ = function (text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length; // Eliminate the null case.\n\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  } // Truncate the longer string.\n\n\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n\n  var text_length = Math.min(text1_length, text2_length); // Quick check for the worst case.\n\n  if (text1 == text2) {\n    return text_length;\n  } // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n\n\n  var best = 0;\n  var length = 1;\n\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n\n    if (found == -1) {\n      return best;\n    }\n\n    length += found;\n\n    if (found == 0 || text1.substring(text_length - length) == text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\n\n\ndiff_match_patch.prototype.diff_halfMatch_ = function (text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null; // Pointless.\n  }\n\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i), shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i), shorttext.substring(0, j));\n\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) + shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  } // First check if the second quarter is the seed for a half-match.\n\n\n  var hm1 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 4)); // Check again based on the third quarter.\n\n  var hm2 = diff_halfMatchI_(longtext, shorttext, Math.ceil(longtext.length / 2));\n  var hm;\n\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  } // A half-match was found, sort out the return data.\n\n\n  var text1_a, text1_b, text2_a, text2_b;\n\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_cleanupSemantic = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n  /** @type {?string} */\n\n  var lastEquality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n  var pointer = 0; // Index of current position.\n  // Number of characters that changed prior to the equality.\n\n  var length_insertions1 = 0;\n  var length_deletions1 = 0; // Number of characters that changed after the equality.\n\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      } // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n\n\n      if (lastEquality && lastEquality.length <= Math.max(length_insertions1, length_deletions1) && lastEquality.length <= Math.max(length_insertions2, length_deletions2)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(DIFF_DELETE, lastEquality)); // Change second copy to insert.\n\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT; // Throw away the equality we just deleted.\n\n        equalitiesLength--; // Throw away the previous equality (it needs to be reevaluated).\n\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0; // Reset the counters.\n\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // Normalize the diff.\n\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n\n  this.diff_cleanupSemanticLossless(diffs); // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n\n  pointer = 1;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE && diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 || overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL, insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] = deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 || overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL, deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] = insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] = deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n\n      pointer++;\n    }\n\n    pointer++;\n  }\n};\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function (diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    } // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n\n\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 && char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 && char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 && char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 && char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 && one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 && two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n\n    return 0;\n  }\n\n  var pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1]; // First, shift the edit as far left as possible.\n\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      } // Second, step character by character right, looking for the best fit.\n\n\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2);\n\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) + diff_cleanupSemanticScore_(edit, equality2); // The >= encourages trailing rather than leading whitespace on edits.\n\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n\n        diffs[pointer][1] = bestEdit;\n\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n\n    pointer++;\n  }\n}; // Define some regex patterns for matching boundaries.\n\n\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\ndiff_match_patch.prototype.diff_cleanupEfficiency = function (diffs) {\n  var changes = false;\n  var equalities = []; // Stack of indices where equalities are found.\n\n  var equalitiesLength = 0; // Keeping our own length var is faster in JS.\n\n  /** @type {?string} */\n\n  var lastEquality = null; // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n\n  var pointer = 0; // Index of current position.\n  // Is there an insertion operation before the last equality.\n\n  var pre_ins = false; // Is there a deletion operation before the last equality.\n\n  var pre_del = false; // Is there an insertion operation after the last equality.\n\n  var post_ins = false; // Is there a deletion operation after the last equality.\n\n  var post_del = false;\n\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {\n      // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost && (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n\n      post_ins = post_del = false;\n    } else {\n      // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n\n\n      if (lastEquality && (pre_ins && pre_del && post_ins && post_del || lastEquality.length < this.Diff_EditCost / 2 && pre_ins + pre_del + post_ins + post_del == 3)) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0, new diff_match_patch.Diff(DIFF_DELETE, lastEquality)); // Change second copy to insert.\n\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--; // Throw away the equality we just deleted;\n\n        lastEquality = null;\n\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--; // Throw away the previous equality.\n\n          pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n\n        changes = true;\n      }\n    }\n\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\n\n\ndiff_match_patch.prototype.diff_cleanupMerge = function (diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              if (pointer - count_delete - count_insert > 0 && diffs[pointer - count_delete - count_insert - 1][0] == DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] += text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL, text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            } // Factor out any common suffixies.\n\n\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length - commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length - commonlength);\n              text_delete = text_delete.substring(0, text_delete.length - commonlength);\n            }\n          } // Delete the offending records and add the merged ones.\n\n\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n\n          if (text_delete.length) {\n            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n\n          if (text_insert.length) {\n            diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop(); // Remove the dummy entry at the end.\n  } // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n\n\n  var changes = false;\n  pointer = 1; // Intentionally ignore the first and last element (don't need checking).\n\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL && diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length - diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] + diffs[pointer][1].substring(0, diffs[pointer][1].length - diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) == diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] = diffs[pointer][1].substring(diffs[pointer + 1][1].length) + diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n\n    pointer++;\n  } // If shifts were made, the diff needs reordering and another shift sweep.\n\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\n\n\ndiff_match_patch.prototype.diff_xIndex = function (diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n\n    if (diffs[x][0] !== DIFF_DELETE) {\n      // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n\n    if (chars1 > loc) {\n      // Overshot the location.\n      break;\n    }\n\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  } // Was the location was deleted?\n\n\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  } // Add the remaining character length.\n\n\n  return last_chars2 + (loc - last_chars1);\n};\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\n\n\ndiff_match_patch.prototype.diff_prettyHtml = function (diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0]; // Operation (insert, delete, equal)\n\n    var data = diffs[x][1]; // Text of change.\n\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;').replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n\n  return html.join('');\n};\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\n\n\ndiff_match_patch.prototype.diff_text1 = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n\n  return text.join('');\n};\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\n\n\ndiff_match_patch.prototype.diff_text2 = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n\n  return text.join('');\n};\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\n\n\ndiff_match_patch.prototype.diff_levenshtein = function (diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\n\n\ndiff_match_patch.prototype.diff_toDelta = function (diffs) {\n  var text = [];\n\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\n\n\ndiff_match_patch.prototype.diff_fromDelta = function (text1, delta) {\n  var diffs = [];\n  var diffsLength = 0; // Keeping our own length var is faster in JS.\n\n  var pointer = 0; // Cursor in text1\n\n  var tokens = delta.split(/\\t/g);\n\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n\n        break;\n\n      case '-': // Fall through.\n\n      case '=':\n        var n = parseInt(param, 10);\n\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n\n        var text = text1.substring(pointer, pointer += n);\n\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n\n        break;\n\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' + tokens[x]);\n        }\n\n    }\n  }\n\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer + ') does not equal source text length (' + text1.length + ').');\n  }\n\n  return diffs;\n}; //  MATCH FUNCTIONS\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\n\n\ndiff_match_patch.prototype.match_main = function (text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\n\n\ndiff_match_patch.prototype.match_bitap_ = function (text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  } // Initialise the alphabet.\n\n\n  var s = this.match_alphabet_(pattern);\n  var dmp = this; // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n\n    return accuracy + proximity / dmp.Match_Distance;\n  } // Highest score beyond which we give up.\n\n\n  var score_threshold = this.Match_Threshold; // Is there a nearby exact match? (speedup)\n\n  var best_loc = text.indexOf(pattern, loc);\n\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold); // What about in the other direction? (speedup)\n\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n\n    if (best_loc != -1) {\n      score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  } // Initialise the bit arrays.\n\n\n  var matchmask = 1 << pattern.length - 1;\n  best_loc = -1;\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n\n      if (d === 0) {\n        // First pass: exact match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch;\n      } else {\n        // Subsequent passes: fuzzy match.\n        rd[j] = (rd[j + 1] << 1 | 1) & charMatch | ((last_rd[j + 1] | last_rd[j]) << 1 | 1) | last_rd[j + 1];\n      }\n\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n\n    last_rd = rd;\n  }\n\n  return best_loc;\n};\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\n\n\ndiff_match_patch.prototype.match_alphabet_ = function (pattern) {\n  var s = {};\n\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << pattern.length - i - 1;\n  }\n\n  return s;\n}; //  PATCH FUNCTIONS\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\n\n\ndiff_match_patch.prototype.patch_addContext_ = function (patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0; // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) && pattern.length < this.Match_MaxBits - this.Patch_Margin - this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding, patch.start2 + patch.length1 + padding);\n  } // Add one chunk for good luck.\n\n\n  padding += this.Patch_Margin; // Add the prefix.\n\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  } // Add the suffix.\n\n\n  var suffix = text.substring(patch.start2 + patch.length1, patch.start2 + patch.length1 + padding);\n\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  } // Roll back the start points.\n\n\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length; // Extend the lengths.\n\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\n\n\ndiff_match_patch.prototype.patch_make = function (a, opt_b, opt_c) {\n  var text1, diffs;\n\n  if (typeof a == 'string' && typeof opt_b == 'string' && typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 =\n    /** @type {string} */\n    a;\n    diffs = this.diff_main(text1,\n    /** @type {string} */\n    opt_b, true);\n\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' && typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs =\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    a;\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' && typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 =\n    /** @type {string} */\n    a;\n    diffs =\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    opt_b;\n  } else if (typeof a == 'string' && typeof opt_b == 'string' && opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 =\n    /** @type {string} */\n    a;\n    diffs =\n    /** @type {!Array.<!diff_match_patch.Diff>} */\n    opt_c;\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return []; // Get rid of the null case.\n  }\n\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0; // Keeping our own length var is faster in JS.\n\n  var char_count1 = 0; // Number of characters into the text1 string.\n\n  var char_count2 = 0; // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text + postpatch_text.substring(char_count2);\n        break;\n\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) + postpatch_text.substring(char_count2 + diff_text.length);\n        break;\n\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin && patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0; // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n\n        break;\n    } // Update the current character count.\n\n\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  } // Pick up the leftover patch if not empty.\n\n\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\n\n\ndiff_match_patch.prototype.patch_deepCopy = function (patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] = new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n\n  return patchesCopy;\n};\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\n\n\ndiff_match_patch.prototype.patch_apply = function (patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  } // Deep copy the patches so that no changes are made to originals.\n\n\n  patches = this.patch_deepCopy(patches);\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n  this.patch_splitMax(patches); // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n\n  var delta = 0;\n  var results = [];\n\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits), expected_loc);\n\n      if (start_loc != -1) {\n        end_loc = this.match_main(text, text1.substring(text1.length - this.Match_MaxBits), expected_loc + text1.length - this.Match_MaxBits);\n\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false; // Subtract the delta for this failed patch from subsequent patches.\n\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) + this.diff_text2(patches[x].diffs) + text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n\n        if (text1.length > this.Match_MaxBits && this.diff_levenshtein(diffs) / text1.length > this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n\n            if (mod[0] === DIFF_INSERT) {\n              // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] + text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {\n              // Deletion\n              text = text.substring(0, start_loc + index2) + text.substring(start_loc + this.diff_xIndex(diffs, index1 + mod[1].length));\n            }\n\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  } // Strip the padding off.\n\n\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\n\n\ndiff_match_patch.prototype.patch_addPadding = function (patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  } // Bump all the patches forward.\n\n\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  } // Add some padding on start of first diff.\n\n\n  var patch = patches[0];\n  var diffs = patch.diffs;\n\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength; // Should be 0.\n\n    patch.start2 -= paddingLength; // Should be 0.\n\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  } // Add some padding on end of last diff.\n\n\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\n\n\ndiff_match_patch.prototype.patch_splitMax = function (patches) {\n  var patch_size = this.Match_MaxBits;\n\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n\n    var bigpatch = patches[x]; // Remove the big old patch.\n\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n\n      while (bigpatch.diffs.length !== 0 && patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 && patch.diffs[0][0] == DIFF_EQUAL && diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0, patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] = bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      } // Compute the head context for the next patch.\n\n\n      precontext = this.diff_text2(patch.diffs);\n      precontext = precontext.substring(precontext.length - this.Patch_Margin); // Append the end context for this patch.\n\n      var postcontext = this.diff_text1(bigpatch.diffs).substring(0, this.Patch_Margin);\n\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n\n        if (patch.diffs.length !== 0 && patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\n\n\ndiff_match_patch.prototype.patch_toText = function (patches) {\n  var text = [];\n\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n\n  return text.join('');\n};\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\n\n\ndiff_match_patch.prototype.patch_fromText = function (textline) {\n  var patches = [];\n\n  if (!textline) {\n    return patches;\n  }\n\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {// Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n\n      textPointer++;\n    }\n  }\n\n  return patches;\n};\n/**\n * Class representing one patch operation.\n * @constructor\n */\n\n\ndiff_match_patch.patch_obj = function () {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n\n  this.start1 = null;\n  /** @type {?number} */\n\n  this.start2 = null;\n  /** @type {number} */\n\n  this.length1 = 0;\n  /** @type {number} */\n\n  this.length2 = 0;\n};\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\n\n\ndiff_match_patch.patch_obj.prototype.toString = function () {\n  var coords1, coords2;\n\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = this.start1 + 1 + ',' + this.length1;\n  }\n\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = this.start2 + 1 + ',' + this.length2;\n  }\n\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op; // Escape the body of the patch with %xx notation.\n\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n\n      case DIFF_DELETE:\n        op = '-';\n        break;\n\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n\n  return text.join('').replace(/%20/g, ' ');\n}; // The following export code was added by @ForbesLindesay\n\n\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;","map":{"version":3,"names":["diff_match_patch","Diff_Timeout","Diff_EditCost","Match_Threshold","Match_Distance","Patch_DeleteThreshold","Patch_Margin","Match_MaxBits","DIFF_DELETE","DIFF_INSERT","DIFF_EQUAL","Diff","op","text","prototype","diff_main","text1","text2","opt_checklines","opt_deadline","Number","MAX_VALUE","Date","getTime","deadline","Error","checklines","commonlength","diff_commonPrefix","commonprefix","substring","diff_commonSuffix","commonsuffix","length","diffs","diff_compute_","unshift","push","diff_cleanupMerge","longtext","shorttext","i","indexOf","hm","diff_halfMatch_","text1_a","text1_b","text2_a","text2_b","mid_common","diffs_a","diffs_b","concat","diff_lineMode_","diff_bisect_","a","diff_linesToChars_","chars1","chars2","linearray","lineArray","diff_charsToLines_","diff_cleanupSemantic","pointer","count_delete","count_insert","text_delete","text_insert","splice","subDiff","j","pop","text1_length","text2_length","max_d","Math","ceil","v_offset","v_length","v1","Array","v2","x","delta","front","k1start","k1end","k2start","k2end","d","k1","k1_offset","x1","y1","charAt","k2_offset","x2","diff_bisectSplit_","k2","y2","y","text1a","text2a","text1b","text2b","diffsb","lineHash","diff_linesToCharsMunge_","chars","lineStart","lineEnd","lineArrayLength","line","hasOwnProperty","undefined","String","fromCharCode","maxLines","charCodeAt","join","pointermin","pointermax","min","pointermid","pointerstart","floor","pointerend","diff_commonOverlap_","text_length","best","pattern","found","dmp","diff_halfMatchI_","seed","best_common","best_longtext_a","best_longtext_b","best_shorttext_a","best_shorttext_b","prefixLength","suffixLength","hm1","hm2","changes","equalities","equalitiesLength","lastEquality","length_insertions1","length_deletions1","length_insertions2","length_deletions2","max","diff_cleanupSemanticLossless","deletion","insertion","overlap_length1","overlap_length2","diff_cleanupSemanticScore_","one","two","char1","char2","nonAlphaNumeric1","match","nonAlphaNumericRegex_","nonAlphaNumeric2","whitespace1","whitespaceRegex_","whitespace2","lineBreak1","linebreakRegex_","lineBreak2","blankLine1","blanklineEndRegex_","blankLine2","blanklineStartRegex_","equality1","edit","equality2","commonOffset","commonString","bestEquality1","bestEdit","bestEquality2","bestScore","score","diff_cleanupEfficiency","pre_ins","pre_del","post_ins","post_del","diff_xIndex","loc","last_chars1","last_chars2","diff_prettyHtml","html","pattern_amp","pattern_lt","pattern_gt","pattern_para","data","replace","diff_text1","diff_text2","diff_levenshtein","levenshtein","insertions","deletions","diff_toDelta","encodeURI","diff_fromDelta","diffsLength","tokens","split","param","decodeURI","ex","n","parseInt","isNaN","match_main","match_bitap_","s","match_alphabet_","match_bitapScore_","e","accuracy","proximity","abs","score_threshold","best_loc","lastIndexOf","matchmask","bin_min","bin_mid","bin_max","last_rd","start","finish","rd","charMatch","patch_addContext_","patch","start2","length1","padding","prefix","suffix","start1","length2","patch_make","opt_b","opt_c","patches","patch_obj","patchDiffLength","char_count1","char_count2","prepatch_text","postpatch_text","diff_type","diff_text","patch_deepCopy","patchesCopy","patchCopy","patch_apply","nullPadding","patch_addPadding","patch_splitMax","results","expected_loc","start_loc","end_loc","index1","index2","mod","paddingLength","extraLength","patch_size","bigpatch","precontext","empty","shift","postcontext","patch_toText","patch_fromText","textline","textPointer","patchHeader","m","sign","toString","coords1","coords2","module","exports"],"sources":["/Users/allen/k8s-platform-fe/node_modules/diff-match-patch/index.js"],"sourcesContent":["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;"],"mappings":"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"},"metadata":{},"sourceType":"script"}