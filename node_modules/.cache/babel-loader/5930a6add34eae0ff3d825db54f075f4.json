{"ast":null,"code":"import common from \"../common/Config\";\nimport { getNamespecelist } from \"@/api/namespace\"; //引入xterm终端依赖\n\nimport { Terminal } from \"xterm\";\nimport { FitAddon } from \"xterm-addon-fit\";\nimport \"xterm/css/xterm.css\";\nimport \"xterm/lib/xterm.js\";\nimport yaml2obj from \"js-yaml\";\nimport json2yaml from \"json2yaml\";\nimport { DeletePod, GetPodContainer, GetPodDetail, getPodList, GetPodLog, UpdatePod } from \"@/api/pod\";\nexport default {\n  data() {\n    return {\n      //编辑器配置\n      cmOptions: common.cmOptions,\n      contentYaml: \"\",\n      //分页\n      currentPage: 1,\n      pagesize: 10,\n      pagesizeList: [10, 20, 30],\n      //\n      searchInput: \"\",\n      namespaceValue: \"default\",\n      namespaceList: [],\n      namespaceListUrl: common.k8sNamespaceList,\n      appLoading: false,\n      podList: [],\n      podTotal: 0,\n      getPodsData: {\n        url: common.k8sPodList,\n        params: {\n          filter_name: \"\",\n          namespace: \"\",\n          page: \"\",\n          limit: \"\"\n        }\n      },\n      //详情\n      podDetail: {},\n      getPodDetailData: {\n        url: common.k8sPodDetail,\n        params: {\n          pod_name: \"\",\n          namespace: \"\"\n        }\n      },\n      //yaml更新\n      yamlDialog: false,\n      updatePodData: {\n        url: common.k8sPodUpdate,\n        params: {\n          namespace: \"\",\n          content: \"\"\n        }\n      },\n      //删除\n      delPodData: {\n        url: common.k8sPodDel,\n        params: {\n          pod_name: \"\",\n          namespace: \"\"\n        }\n      },\n      //expand扩展\n      activeName: \"container\",\n      expandKeys: [],\n      expandMap: {},\n      //日志\n      containerList: {},\n      containerValue: \"\",\n      getPodContainerData: {\n        url: common.k8sPodContainer,\n        params: {\n          pod_name: \"\",\n          namespace: \"\"\n        }\n      },\n      logContent: \"\",\n      getPodLogData: {\n        url: common.k8sPodLog,\n        params: {\n          container_name: \"\",\n          pod_name: \"\",\n          namespace: \"\"\n        }\n      },\n      //terminal\n      term: null,\n      socket: null\n    };\n  },\n\n  methods: {\n    transYaml(content) {\n      return json2yaml.stringify(content);\n    },\n\n    transObj(content) {\n      return yaml2obj.load(content);\n    },\n\n    onChange(val) {\n      this.contentYaml = val;\n    },\n\n    handleSizeChange(size) {\n      this.pagesize = size;\n      this.getPods();\n    },\n\n    handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.getPods();\n    },\n\n    handleClose(done) {\n      this.$confirm(\"确认关闭？\").then(() => {\n        done();\n      }).catch(() => {});\n    },\n\n    ellipsis(value) {\n      return value.length > 15 ? value.substring(0, 15) + \"...\" : value;\n    },\n\n    timeTrans(timestamp) {\n      let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000);\n      date = date.toJSON();\n      date = date.substring(0, 19).replace(\"T\", \" \");\n      return date;\n    },\n\n    restartTotal(e) {\n      let index,\n          sum = 0;\n      let containerStatuses = e.row.status.containerStatuses;\n\n      for (index in containerStatuses) {\n        sum = sum + containerStatuses[index].restartCount;\n      }\n\n      return sum;\n    },\n\n    getNamespaces() {\n      getNamespecelist(this.namespaceListUrl).then(res => {\n        this.namespaceList = res.data.items;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    getPods() {\n      this.appLoading = true;\n      this.getPodsData.params.filter_name = this.searchInput;\n      this.getPodsData.params.namespace = this.namespaceValue;\n      this.getPodsData.params.page = this.currentPage;\n      this.getPodsData.params.limit = this.pagesize;\n      getPodList(this.getPodsData.params).then(res => {\n        this.podList = res.data.items;\n        this.podTotal = res.data.total;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n      this.appLoading = false;\n    },\n\n    getPodDetail(e) {\n      this.getPodDetailData.params.pod_name = e.row.metadata.name;\n      this.getPodDetailData.params.namespace = this.namespaceValue;\n      GetPodDetail(this.getPodDetailData.params).then(res => {\n        this.podDetail = res.data;\n        this.contentYaml = this.transYaml(this.podDetail);\n        this.yamlDialog = true;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    updatePod() {\n      let content = JSON.stringify(this.transObj(this.contentYaml));\n      this.updatePodData.params.namespace = this.namespaceValue;\n      this.updatePodData.params.content = content;\n      UpdatePod(this.updatePodData.params).then(res => {\n        this.$message.success({\n          message: res.msg\n        });\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n      this.yamlDialog = false;\n    },\n\n    delPod(e) {\n      this.delPodData.params.pod_name = e.row.metadata.name;\n      this.delPodData.params.namespace = this.namespaceValue;\n      DeletePod(this.delPodData.params).then(res => {\n        this.getPods();\n        this.$message.success({\n          message: res.msg\n        });\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    handleConfirm(obj, operateName, fn) {\n      this.confirmContent = \"确认继续 \" + operateName + \" 操作吗？\";\n      this.$confirm(this.confirmContent, \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\"\n      }).then(() => {\n        fn(obj);\n      }).catch(() => {\n        this.$message.info({\n          message: \"已取消操作\"\n        });\n      });\n    },\n\n    getRowKeys(row) {\n      return row.metadata.name;\n    },\n\n    //row，展开的当前行的数据\n    //expandedRows，展开的所有行的数据组成的数组，但是这里用法是只会有一行，也就是数组长度永远为1\n    expandChange(row, expandedRows) {\n      //初始化变量\n      //清空expandKeys，代表关闭所有展开的行\n      this.expandKeys = []; //清空日志内容\n\n      this.logContent = \"\"; //清空containervalue，展开时不显示上次的值\n\n      this.containerValue = \"\"; //将tab标签页顶部页面调成容器\n\n      this.activeName = \"container\"; //expandedRows.length == 1表示展开，expandedRows.length == 0 表示关闭\n\n      if (expandedRows.length > 0) {\n        //expandMap key表示展开过的行的key，值为1表示展开标记，值为0表示关闭标记\n        //expandMap用于数据表格点击name的展开，用于判断这一行是展开还是关闭的行为\n        this.expandMap[row.metadata.name] = 1; //将expandMap除了row.metadata.name，其他key的值都置为0\n\n        this.setExpandMap(row.metadata.name); //这里才是真正的展开，将row.metadata.name添加到expandKeys数组中展开，然后执行方法获取container\n\n        row ? (this.expandKeys.push(row.metadata.name), this.getPodContainer(row)) : \"\";\n      } else {\n        //关闭标记\n        this.expandMap[row.metadata.name] = 0;\n      }\n    },\n\n    //匹配expandMap中podName，不相等的全都置为0，意为除了podName这行，其他全都标记关闭\n    setExpandMap(podName) {\n      let key;\n\n      for (key in this.expandMap) {\n        key !== podName ? this.expandMap[key] = 0 : \"\";\n      }\n    },\n\n    getPodContainer(row) {\n      this.getPodContainerData.params.pod_name = row.metadata.name;\n      this.getPodContainerData.params.namespace = this.namespaceValue;\n      GetPodContainer(this.getPodContainerData.params).then(res => {\n        this.containerList = res.data;\n        this.containerValue = this.containerList[0];\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    getPodLog(podName) {\n      this.getPodLogData.params.pod_name = podName;\n      this.getPodLogData.params.container_name = this.containerValue;\n      this.getPodLogData.params.namespace = this.namespaceValue;\n      GetPodLog(this.getPodLogData.params).then(res => {\n        this.logContent = res.data;\n      }).catch(res => {\n        this.$message.error({\n          message: res.msg\n        });\n      });\n    },\n\n    initTerm() {\n      //初始化xterm实例\n      this.term = new Terminal({\n        rendererType: \"canvas\",\n        //渲染类型\n        rows: 30,\n        //行数\n        cols: 110,\n        convertEol: false,\n        //启用时，光标将设置为下一行的开头\n        scrollback: 10,\n        //终端中的回滚量\n        disableStdin: false,\n        //是否应禁用输入\n        cursorStyle: \"underline\",\n        //光标样式\n        cursorBlink: true,\n        //光标闪烁\n        theme: {\n          foreground: \"white\",\n          //字体\n          background: \"#060101\",\n          //背景色\n          cursor: \"help\" //设置光标\n\n        }\n      }); //绑定dom\n\n      this.term.open(document.getElementById(\"xterm\")); //终端适应父元素大小\n\n      const fitAddon = new FitAddon();\n      this.term.loadAddon(fitAddon);\n      fitAddon.fit(); //获取终端的焦点\n\n      this.term.focus();\n\n      let _this = this; //一定要重新定义一个this，不然this指向会出问题\n      //onData方法用于定义输入的动作\n\n\n      this.term.onData(function (key) {\n        // 这里key值是输入的值，数据格式就是后端定义的 {\"operation\":\"stdin\",\"data\":\"ls\"}\n        let msgOrder = {\n          operation: \"stdin\",\n          data: key\n        }; //发送数据\n\n        _this.socket.send(JSON.stringify(msgOrder));\n      }); //发送resize请求\n\n      let msgOrder2 = {\n        operation: \"resize\",\n        cols: this.term.cols,\n        rows: this.term.rows\n      };\n      this.socket.send(JSON.stringify(msgOrder2));\n    },\n\n    //初始化websocket\n    initSocket(row) {\n      //定义websocket连接地址\n      let terminalWsUrl = common.k8sTerminalWs + \"?pod_name=\" + row.metadata.name + \"&container_name=\" + this.containerValue + \"&namespace=\" + this.namespaceValue; //实例化\n\n      this.socket = new WebSocket(terminalWsUrl); //关闭连接时的方法\n\n      this.socketOnClose(); //建立连接时的方法\n\n      this.socketOnOpen(); //接收消息的方法\n\n      this.socketOnMessage(); //报错时的方法\n\n      this.socketOnError();\n    },\n\n    socketOnOpen() {\n      this.socket.onopen = () => {\n        //简历连接成功后，初始化虚拟终端\n        this.initTerm();\n      };\n    },\n\n    socketOnMessage() {\n      this.socket.onmessage = msg => {\n        //接收到消息后将字符串转为对象，输出data内容\n        let content = JSON.parse(msg.data);\n        this.term.write(content.data);\n      };\n    },\n\n    socketOnClose() {\n      this.socket.onclose = () => {\n        //关闭连接后打印在终端里\n        this.term.write(\"链接已关闭\");\n      };\n    },\n\n    socketOnError() {\n      this.socket.onerror = () => {\n        console.log(\"socket 链接失败\");\n      };\n    },\n\n    //关闭连接\n    closeSocket() {\n      //若没有实例化，则不需要关闭\n      if (this.socket === null) {\n        return;\n      }\n\n      this.term.write(\"链接关闭中。。。\");\n      this.socket.close();\n    }\n\n  },\n  watch: {\n    namespaceValue: {\n      handler() {\n        localStorage.setItem(\"namespace\", this.namespaceValue);\n        this.currentPage = 1;\n        this.getPods();\n      }\n\n    },\n    //若tab标签页切到日志，则重新加载日志内容\n    activeName: {\n      handler() {\n        if (this.activeName == \"log\") {\n          this.expandKeys.length == 1 ? this.getPodLog(this.expandKeys[0]) : \"\";\n        }\n      }\n\n    }\n  },\n\n  beforeMount() {\n    if (localStorage.getItem(\"namespace\") !== undefined && localStorage.getItem(\"namespace\") !== null) {\n      this.namespaceValue = localStorage.getItem(\"namespace\");\n    }\n\n    this.getNamespaces();\n    this.getPods();\n  },\n\n  beforeUnmount() {\n    //若websocket连接没有关闭，则在改生命周期关闭\n    if (this.socket !== null) {\n      this.socket.close();\n    }\n  }\n\n};","map":{"version":3,"mappings":"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","names":["common","getNamespecelist","Terminal","FitAddon","yaml2obj","json2yaml","DeletePod","GetPodContainer","GetPodDetail","getPodList","GetPodLog","UpdatePod","data","cmOptions","contentYaml","currentPage","pagesize","pagesizeList","searchInput","namespaceValue","namespaceList","namespaceListUrl","k8sNamespaceList","appLoading","podList","podTotal","getPodsData","url","k8sPodList","params","filter_name","namespace","page","limit","podDetail","getPodDetailData","k8sPodDetail","pod_name","yamlDialog","updatePodData","k8sPodUpdate","content","delPodData","k8sPodDel","activeName","expandKeys","expandMap","containerList","containerValue","getPodContainerData","k8sPodContainer","logContent","getPodLogData","k8sPodLog","container_name","term","socket","methods","transYaml","stringify","transObj","load","onChange","val","handleSizeChange","size","getPods","handleCurrentChange","handleClose","done","$confirm","then","catch","ellipsis","value","length","substring","timeTrans","timestamp","date","Date","getTime","toJSON","replace","restartTotal","e","index","sum","containerStatuses","row","status","restartCount","getNamespaces","res","items","$message","error","message","msg","total","getPodDetail","metadata","name","updatePod","JSON","success","delPod","handleConfirm","obj","operateName","fn","confirmContent","confirmButtonText","cancelButtonText","info","getRowKeys","expandChange","expandedRows","setExpandMap","push","getPodContainer","podName","key","getPodLog","initTerm","rendererType","rows","cols","convertEol","scrollback","disableStdin","cursorStyle","cursorBlink","theme","foreground","background","cursor","open","document","getElementById","fitAddon","loadAddon","fit","focus","_this","onData","msgOrder","operation","send","msgOrder2","initSocket","terminalWsUrl","k8sTerminalWs","WebSocket","socketOnClose","socketOnOpen","socketOnMessage","socketOnError","onopen","onmessage","parse","write","onclose","onerror","console","log","closeSocket","close","watch","handler","localStorage","setItem","beforeMount","getItem","undefined","beforeUnmount"],"sourceRoot":"","sources":["/Users/allen/kubemanage-web/src/views/pod/Pod.vue"],"sourcesContent":["<template>\n  <div class=\"pod\">\n    <el-row>\n      <!-- 头部1 -->\n      <el-col :span=\"24\">\n        <div>\n          <el-card\n            class=\"pod-head-card\"\n            shadow=\"never\"\n            :body-style=\"{ padding: '10px' }\"\n          >\n            <el-row>\n              <el-col :span=\"6\">\n                <div>\n                  <span>命名空间: </span>\n                  <el-select\n                    v-model=\"namespaceValue\"\n                    filterable\n                    placeholder=\"请选择\"\n                  >\n                    <el-option\n                      v-for=\"(item, index) in namespaceList\"\n                      :key=\"index\"\n                      :label=\"item.metadata.name\"\n                      :value=\"item.metadata.name\"\n                    >\n                    </el-option>\n                  </el-select>\n                </div>\n              </el-col>\n              <el-col :span=\"2\" :offset=\"16\">\n                <div>\n                  <el-button\n                    style=\"border-radius: 2px\"\n                    icon=\"Refresh\"\n                    plain\n                    @click=\"getPods()\"\n                    >刷新</el-button\n                  >\n                </div>\n              </el-col>\n            </el-row>\n          </el-card>\n        </div>\n      </el-col>\n      <!-- 头部2 -->\n      <el-col :span=\"24\">\n        <div>\n          <el-card\n            class=\"pod-head-card\"\n            shadow=\"never\"\n            :body-style=\"{ padding: '10px' }\"\n          >\n            <el-row>\n              <el-col :span=\"2\">\n                <div>\n                  <el-button\n                    disabled\n                    style=\"border-radius: 2px\"\n                    icon=\"Edit\"\n                    type=\"primary\"\n                    >创建</el-button\n                  >\n                </div>\n              </el-col>\n              <el-col :span=\"6\">\n                <div>\n                  <el-input\n                    class=\"pod-head-search\"\n                    clearable\n                    placeholder=\"请输入\"\n                    v-model=\"searchInput\"\n                  ></el-input>\n                  <el-button\n                    style=\"border-radius: 2px\"\n                    icon=\"Search\"\n                    type=\"primary\"\n                    plain\n                    @click=\"getPods()\"\n                    >搜索</el-button\n                  >\n                </div>\n              </el-col>\n            </el-row>\n          </el-card>\n        </div>\n      </el-col>\n      <!-- 数据表格 -->\n      <el-col :span=\"24\">\n        <div>\n          <el-card\n            class=\"pod-body-card\"\n            shadow=\"never\"\n            :body-style=\"{ padding: '5px' }\"\n          >\n            <!-- 数据表格 -->\n            <!-- row-key 用来定义行数据的key，结合expand-row-keys使用，往expandKeys中增加key来展开行 -->\n            <!-- expand-row-keys 展开的行的key数组 -->\n            <!-- expand-change 展开触发时，调用这个方法 -->\n            <el-table\n              style=\"width: 100%; font-size: 12px; margin-bottom: 10px\"\n              :data=\"podList\"\n              v-loading=\"appLoading\"\n              :row-key=\"getRowKeys\"\n              :expand-row-keys=\"expandKeys\"\n              @expand-change=\"expandChange\"\n            >\n              <el-table-column width=\"10\"></el-table-column>\n              <!-- 展开 -->\n              <el-table-column type=\"expand\">\n                <!-- 插槽，里面是展开的内容,props标识展开的行的数据 -->\n                <template #default=\"props\">\n                  <el-tabs v-model=\"activeName\" type=\"card\">\n                    <!-- tab容器标签页 -->\n                    <el-tab-pane label=\"容器\" name=\"container\">\n                      <el-card\n                        shadow=\"never\"\n                        style=\"border-radius: 1px\"\n                        :body-style=\"{ padding: '5px' }\"\n                      >\n                        <!-- 嵌套数据表格 -->\n                        <el-table\n                          style=\"width: 100%; font-size: 12px\"\n                          :data=\"props.row.spec.containers\"\n                        >\n                          <el-table-column\n                            align=\"left\"\n                            prop=\"name\"\n                            label=\"容器名\"\n                          ></el-table-column>\n                          <el-table-column\n                            align=\"left\"\n                            prop=\"image\"\n                            label=\"镜像\"\n                          ></el-table-column>\n                          <el-table-column align=\"center\" label=\"Pod IP\">\n                            <span>{{ props.row.status.podIP }}</span>\n                          </el-table-column>\n                          <el-table-column\n                            align=\"center\"\n                            prop=\"args\"\n                            label=\"启动命令\"\n                          ></el-table-column>\n                          <el-table-column align=\"center\" label=\"环境变量\">\n                            <template v-slot=\"scope\">\n                              <!-- 气泡弹出框，内容是所有的环境变量 -->\n                              <el-popover\n                                :width=\"500\"\n                                placement=\"left\"\n                                trigger=\"hover\"\n                              >\n                                <el-table\n                                  style=\"width: 100%; font-size: 12px\"\n                                  size=\"mini\"\n                                  :show-header=\"false\"\n                                  :data=\"scope.row.env\"\n                                >\n                                  <el-table-column\n                                    property=\"name\"\n                                    label=\"名称\"\n                                  ></el-table-column>\n                                  <el-table-column\n                                    property=\"value\"\n                                    label=\"值\"\n                                  ></el-table-column>\n                                </el-table>\n                                <template #reference>\n                                  <el-button size=\"small\">此处查看</el-button>\n                                </template>\n                              </el-popover>\n                            </template>\n                          </el-table-column>\n                        </el-table>\n                      </el-card>\n                    </el-tab-pane>\n                    <!-- tab日志标签页 -->\n                    <el-tab-pane label=\"日志\" name=\"log\">\n                      <el-card\n                        shadow=\"never\"\n                        style=\"border-radius: 1px\"\n                        :body-style=\"{ padding: '5px' }\"\n                      >\n                        <el-row :gutter=\"10\">\n                          <el-col :span=\"3\">\n                            <!-- 容器选择框 -->\n                            <el-select\n                              size=\"small\"\n                              v-model=\"containerValue\"\n                              placeholder=\"请选择\"\n                            >\n                              <el-option\n                                v-for=\"item in containerList\"\n                                :key=\"item\"\n                                :value=\"item\"\n                              >\n                              </el-option>\n                            </el-select>\n                          </el-col>\n                          <el-col :span=\"2\">\n                            <!-- 查看日志按钮 -->\n                            <el-button\n                              style=\"border-radius: 2px\"\n                              size=\"small\"\n                              type=\"primary\"\n                              @click=\"getPodLog(props.row.metadata.name)\"\n                              >查看</el-button\n                            >\n                          </el-col>\n                          <el-col :span=\"24\" style=\"margin-top: 5px\">\n                            <!-- 显示日志内容 -->\n                            <el-card\n                              shadow=\"never\"\n                              class=\"pod-body-log-card\"\n                              :body-style=\"{ padding: '5px' }\"\n                            >\n                              <span class=\"pod-body-log-span\">{{\n                                logContent\n                              }}</span>\n                            </el-card>\n                          </el-col>\n                        </el-row>\n                      </el-card>\n                    </el-tab-pane>\n                    <!-- tab终端标签页 -->\n                    <el-tab-pane label=\"终端\" name=\"shell\">\n                      <el-card\n                        shadow=\"never\"\n                        style=\"border-radius: 1px\"\n                        :body-style=\"{ padding: '5px' }\"\n                      >\n                        <el-row :gutter=\"10\">\n                          <el-col :span=\"3\">\n                            <!-- 容器选择框 -->\n                            <el-select\n                              size=\"small\"\n                              v-model=\"containerValue\"\n                              placeholder=\"请选择\"\n                            >\n                              <el-option\n                                v-for=\"item in containerList\"\n                                :key=\"item\"\n                                :value=\"item\"\n                              >\n                              </el-option>\n                            </el-select>\n                          </el-col>\n                          <el-col :span=\"1\">\n                            <!-- 连接按钮 -->\n                            <el-button\n                              style=\"border-radius: 2px\"\n                              size=\"small\"\n                              type=\"primary\"\n                              @click=\"initSocket(props.row)\"\n                              >连接</el-button\n                            >\n                          </el-col>\n                          <el-col :span=\"1\">\n                            <!-- 关闭连接按钮 -->\n                            <el-button\n                              style=\"border-radius: 2px\"\n                              size=\"small\"\n                              type=\"danger\"\n                              @click=\"closeSocket()\"\n                              >关闭</el-button\n                            >\n                          </el-col>\n                          <el-col :span=\"24\" style=\"margin-top: 5px\">\n                            <el-card\n                              shadow=\"never\"\n                              class=\"pod-body-shell-card\"\n                              :body-style=\"{ padding: '5px' }\"\n                            >\n                              <!-- xterm虚拟终端 -->\n                              <div id=\"xterm\"></div>\n                            </el-card>\n                          </el-col>\n                        </el-row>\n                      </el-card>\n                    </el-tab-pane>\n                  </el-tabs>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"left\" label=\"Pod名\">\n                <template v-slot=\"scope\">\n                  <!-- 三元运算：expandMap[scope.row.metadata.name]为1则\n                  触发关闭（expandedRows为空数组），为0则触发展开expandedRows有值 -->\n                  <a\n                    class=\"pod-body-podname\"\n                    @click=\"\n                      expandMap[scope.row.metadata.name]\n                        ? expandChange(scope.row, [])\n                        : expandChange(scope.row, [scope.row])\n                    \"\n                    >{{ scope.row.metadata.name }}</a\n                  >\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" min-width=\"150\" label=\"节点\">\n                <template v-slot=\"scope\">\n                  <el-tag\n                    v-if=\"scope.row.spec.nodeName !== undefined\"\n                    type=\"warning\"\n                    >{{ scope.row.spec.nodeName }}</el-tag\n                  >\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"状态\">\n                <template v-slot=\"scope\">\n                  <div\n                    :class=\"{\n                      'success-dot': scope.row.status.phase == 'Running',\n                      'warning-dot': scope.row.status.phase == 'Pending',\n                      'error-dot':\n                        scope.row.status.phase != 'Running' &&\n                        scope.row.status.phase != 'Pending',\n                    }\"\n                  ></div>\n                  <span\n                    :class=\"{\n                      'success-status': scope.row.status.phase == 'Running',\n                      'warning-status': scope.row.status.phase == 'Pending',\n                      'error-status':\n                        scope.row.status.phase != 'Running' &&\n                        scope.row.status.phase != 'Pending',\n                    }\"\n                    >{{ scope.row.status.phase }}\n                  </span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"重启数\">\n                <template v-slot=\"scope\">\n                  <span>{{ restartTotal(scope) }} </span>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" min-width=\"100\" label=\"创建时间\">\n                <template v-slot=\"scope\">\n                  <el-tag type=\"info\"\n                    >{{ timeTrans(scope.row.metadata.creationTimestamp) }}\n                  </el-tag>\n                </template>\n              </el-table-column>\n              <el-table-column align=\"center\" label=\"操作\" width=\"200\">\n                <template v-slot=\"scope\">\n                  <el-button\n                    size=\"small\"\n                    style=\"border-radius: 2px\"\n                    icon=\"Edit\"\n                    type=\"primary\"\n                    plain\n                    @click=\"getPodDetail(scope)\"\n                    >YAML</el-button\n                  >\n                  <el-button\n                    size=\"small\"\n                    style=\"border-radius: 2px\"\n                    icon=\"Delete\"\n                    type=\"danger\"\n                    @click=\"handleConfirm(scope, '删除', delPod)\"\n                    >删除</el-button\n                  >\n                </template>\n              </el-table-column>\n            </el-table>\n            <el-pagination\n              class=\"pod-body-pagination\"\n              background\n              @size-change=\"handleSizeChange\"\n              @current-change=\"handleCurrentChange\"\n              :current-page=\"currentPage\"\n              :page-sizes=\"pagesizeList\"\n              :page-size=\"pagesize\"\n              layout=\"total, sizes, prev, pager, next, jumper\"\n              :total=\"podTotal\"\n            >\n            </el-pagination>\n          </el-card>\n        </div>\n      </el-col>\n    </el-row>\n    <!-- 展示YAML信息的弹框 -->\n    <el-dialog title=\"YAML信息\" v-model=\"yamlDialog\" width=\"45%\" top=\"5%\">\n      <codemirror\n        :value=\"contentYaml\"\n        border\n        :options=\"cmOptions\"\n        height=\"500\"\n        style=\"font-size: 14px\"\n        @change=\"onChange\"\n      ></codemirror>\n      <template #footer>\n        <span class=\"dialog-footer\">\n          <el-button @click=\"yamlDialog = false\">取 消</el-button>\n          <el-button type=\"primary\" @click=\"updatePod()\">更 新</el-button>\n        </span>\n      </template>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport common from \"../common/Config\";\nimport { getNamespecelist } from \"@/api/namespace\";\n//引入xterm终端依赖\nimport { Terminal } from \"xterm\";\nimport { FitAddon } from \"xterm-addon-fit\";\nimport \"xterm/css/xterm.css\";\nimport \"xterm/lib/xterm.js\";\nimport yaml2obj from \"js-yaml\";\nimport json2yaml from \"json2yaml\";\nimport {\n  DeletePod,\n  GetPodContainer,\n  GetPodDetail,\n  getPodList,\n  GetPodLog,\n  UpdatePod,\n} from \"@/api/pod\";\nexport default {\n  data() {\n    return {\n      //编辑器配置\n      cmOptions: common.cmOptions,\n      contentYaml: \"\",\n      //分页\n      currentPage: 1,\n      pagesize: 10,\n      pagesizeList: [10, 20, 30],\n      //\n      searchInput: \"\",\n      namespaceValue: \"default\",\n      namespaceList: [],\n      namespaceListUrl: common.k8sNamespaceList,\n      appLoading: false,\n      podList: [],\n      podTotal: 0,\n      getPodsData: {\n        url: common.k8sPodList,\n        params: {\n          filter_name: \"\",\n          namespace: \"\",\n          page: \"\",\n          limit: \"\",\n        },\n      },\n      //详情\n      podDetail: {},\n      getPodDetailData: {\n        url: common.k8sPodDetail,\n        params: {\n          pod_name: \"\",\n          namespace: \"\",\n        },\n      },\n      //yaml更新\n      yamlDialog: false,\n      updatePodData: {\n        url: common.k8sPodUpdate,\n        params: {\n          namespace: \"\",\n          content: \"\",\n        },\n      },\n      //删除\n      delPodData: {\n        url: common.k8sPodDel,\n        params: {\n          pod_name: \"\",\n          namespace: \"\",\n        },\n      },\n      //expand扩展\n      activeName: \"container\",\n      expandKeys: [],\n      expandMap: {},\n      //日志\n      containerList: {},\n      containerValue: \"\",\n      getPodContainerData: {\n        url: common.k8sPodContainer,\n        params: {\n          pod_name: \"\",\n          namespace: \"\",\n        },\n      },\n      logContent: \"\",\n      getPodLogData: {\n        url: common.k8sPodLog,\n        params: {\n          container_name: \"\",\n          pod_name: \"\",\n          namespace: \"\",\n        },\n      },\n      //terminal\n      term: null,\n      socket: null,\n    };\n  },\n  methods: {\n    transYaml(content) {\n      return json2yaml.stringify(content);\n    },\n    transObj(content) {\n      return yaml2obj.load(content);\n    },\n    onChange(val) {\n      this.contentYaml = val;\n    },\n    handleSizeChange(size) {\n      this.pagesize = size;\n      this.getPods();\n    },\n    handleCurrentChange(currentPage) {\n      this.currentPage = currentPage;\n      this.getPods();\n    },\n    handleClose(done) {\n      this.$confirm(\"确认关闭？\")\n        .then(() => {\n          done();\n        })\n        .catch(() => {});\n    },\n    ellipsis(value) {\n      return value.length > 15 ? value.substring(0, 15) + \"...\" : value;\n    },\n    timeTrans(timestamp) {\n      let date = new Date(new Date(timestamp).getTime() + 8 * 3600 * 1000);\n      date = date.toJSON();\n      date = date.substring(0, 19).replace(\"T\", \" \");\n      return date;\n    },\n    restartTotal(e) {\n      let index,\n        sum = 0;\n      let containerStatuses = e.row.status.containerStatuses;\n      for (index in containerStatuses) {\n        sum = sum + containerStatuses[index].restartCount;\n      }\n      return sum;\n    },\n    getNamespaces() {\n      getNamespecelist(this.namespaceListUrl)\n        .then((res) => {\n          this.namespaceList = res.data.items;\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n    },\n    getPods() {\n      this.appLoading = true;\n      this.getPodsData.params.filter_name = this.searchInput;\n      this.getPodsData.params.namespace = this.namespaceValue;\n      this.getPodsData.params.page = this.currentPage;\n      this.getPodsData.params.limit = this.pagesize;\n      getPodList(this.getPodsData.params)\n        .then((res) => {\n          this.podList = res.data.items;\n          this.podTotal = res.data.total;\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n      this.appLoading = false;\n    },\n    getPodDetail(e) {\n      this.getPodDetailData.params.pod_name = e.row.metadata.name;\n      this.getPodDetailData.params.namespace = this.namespaceValue;\n      GetPodDetail(this.getPodDetailData.params)\n        .then((res) => {\n          this.podDetail = res.data;\n          this.contentYaml = this.transYaml(this.podDetail);\n          this.yamlDialog = true;\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n    },\n    updatePod() {\n      let content = JSON.stringify(this.transObj(this.contentYaml));\n      this.updatePodData.params.namespace = this.namespaceValue;\n      this.updatePodData.params.content = content;\n      UpdatePod(this.updatePodData.params)\n        .then((res) => {\n          this.$message.success({\n            message: res.msg,\n          });\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n      this.yamlDialog = false;\n    },\n    delPod(e) {\n      this.delPodData.params.pod_name = e.row.metadata.name;\n      this.delPodData.params.namespace = this.namespaceValue;\n      DeletePod(this.delPodData.params)\n        .then((res) => {\n          this.getPods();\n          this.$message.success({\n            message: res.msg,\n          });\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n    },\n    handleConfirm(obj, operateName, fn) {\n      this.confirmContent = \"确认继续 \" + operateName + \" 操作吗？\";\n      this.$confirm(this.confirmContent, \"提示\", {\n        confirmButtonText: \"确定\",\n        cancelButtonText: \"取消\",\n      })\n        .then(() => {\n          fn(obj);\n        })\n        .catch(() => {\n          this.$message.info({\n            message: \"已取消操作\",\n          });\n        });\n    },\n    getRowKeys(row) {\n      return row.metadata.name;\n    },\n    //row，展开的当前行的数据\n    //expandedRows，展开的所有行的数据组成的数组，但是这里用法是只会有一行，也就是数组长度永远为1\n    expandChange(row, expandedRows) {\n      //初始化变量\n      //清空expandKeys，代表关闭所有展开的行\n      this.expandKeys = [];\n      //清空日志内容\n      this.logContent = \"\";\n      //清空containervalue，展开时不显示上次的值\n      this.containerValue = \"\";\n      //将tab标签页顶部页面调成容器\n      this.activeName = \"container\";\n      //expandedRows.length == 1表示展开，expandedRows.length == 0 表示关闭\n      if (expandedRows.length > 0) {\n        //expandMap key表示展开过的行的key，值为1表示展开标记，值为0表示关闭标记\n        //expandMap用于数据表格点击name的展开，用于判断这一行是展开还是关闭的行为\n        this.expandMap[row.metadata.name] = 1;\n        //将expandMap除了row.metadata.name，其他key的值都置为0\n        this.setExpandMap(row.metadata.name);\n        //这里才是真正的展开，将row.metadata.name添加到expandKeys数组中展开，然后执行方法获取container\n        row\n          ? (this.expandKeys.push(row.metadata.name), this.getPodContainer(row))\n          : \"\";\n      } else {\n        //关闭标记\n        this.expandMap[row.metadata.name] = 0;\n      }\n    },\n    //匹配expandMap中podName，不相等的全都置为0，意为除了podName这行，其他全都标记关闭\n    setExpandMap(podName) {\n      let key;\n      for (key in this.expandMap) {\n        key !== podName ? (this.expandMap[key] = 0) : \"\";\n      }\n    },\n    getPodContainer(row) {\n      this.getPodContainerData.params.pod_name = row.metadata.name;\n      this.getPodContainerData.params.namespace = this.namespaceValue;\n      GetPodContainer(this.getPodContainerData.params)\n        .then((res) => {\n          this.containerList = res.data;\n          this.containerValue = this.containerList[0];\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n    },\n    getPodLog(podName) {\n      this.getPodLogData.params.pod_name = podName;\n      this.getPodLogData.params.container_name = this.containerValue;\n      this.getPodLogData.params.namespace = this.namespaceValue;\n      GetPodLog(this.getPodLogData.params)\n        .then((res) => {\n          this.logContent = res.data;\n        })\n        .catch((res) => {\n          this.$message.error({\n            message: res.msg,\n          });\n        });\n    },\n    initTerm() {\n      //初始化xterm实例\n      this.term = new Terminal({\n        rendererType: \"canvas\", //渲染类型\n        rows: 30, //行数\n        cols: 110,\n        convertEol: false, //启用时，光标将设置为下一行的开头\n        scrollback: 10, //终端中的回滚量\n        disableStdin: false, //是否应禁用输入\n        cursorStyle: \"underline\", //光标样式\n        cursorBlink: true, //光标闪烁\n        theme: {\n          foreground: \"white\", //字体\n          background: \"#060101\", //背景色\n          cursor: \"help\", //设置光标\n        },\n      });\n      //绑定dom\n      this.term.open(document.getElementById(\"xterm\"));\n      //终端适应父元素大小\n      const fitAddon = new FitAddon();\n      this.term.loadAddon(fitAddon);\n      fitAddon.fit();\n      //获取终端的焦点\n      this.term.focus();\n      let _this = this; //一定要重新定义一个this，不然this指向会出问题\n      //onData方法用于定义输入的动作\n      this.term.onData(function (key) {\n        // 这里key值是输入的值，数据格式就是后端定义的 {\"operation\":\"stdin\",\"data\":\"ls\"}\n        let msgOrder = {\n          operation: \"stdin\",\n          data: key,\n        };\n        //发送数据\n        _this.socket.send(JSON.stringify(msgOrder));\n      });\n      //发送resize请求\n      let msgOrder2 = {\n        operation: \"resize\",\n        cols: this.term.cols,\n        rows: this.term.rows,\n      };\n      this.socket.send(JSON.stringify(msgOrder2));\n    },\n    //初始化websocket\n    initSocket(row) {\n      //定义websocket连接地址\n      let terminalWsUrl =\n        common.k8sTerminalWs +\n        \"?pod_name=\" +\n        row.metadata.name +\n        \"&container_name=\" +\n        this.containerValue +\n        \"&namespace=\" +\n        this.namespaceValue;\n      //实例化\n      this.socket = new WebSocket(terminalWsUrl);\n      //关闭连接时的方法\n      this.socketOnClose();\n      //建立连接时的方法\n      this.socketOnOpen();\n      //接收消息的方法\n      this.socketOnMessage();\n      //报错时的方法\n      this.socketOnError();\n    },\n    socketOnOpen() {\n      this.socket.onopen = () => {\n        //简历连接成功后，初始化虚拟终端\n        this.initTerm();\n      };\n    },\n    socketOnMessage() {\n      this.socket.onmessage = (msg) => {\n        //接收到消息后将字符串转为对象，输出data内容\n        let content = JSON.parse(msg.data);\n        this.term.write(content.data);\n      };\n    },\n    socketOnClose() {\n      this.socket.onclose = () => {\n        //关闭连接后打印在终端里\n        this.term.write(\"链接已关闭\");\n      };\n    },\n    socketOnError() {\n      this.socket.onerror = () => {\n        console.log(\"socket 链接失败\");\n      };\n    },\n    //关闭连接\n    closeSocket() {\n      //若没有实例化，则不需要关闭\n      if (this.socket === null) {\n        return;\n      }\n      this.term.write(\"链接关闭中。。。\");\n      this.socket.close();\n    },\n  },\n  watch: {\n    namespaceValue: {\n      handler() {\n        localStorage.setItem(\"namespace\", this.namespaceValue);\n        this.currentPage = 1;\n        this.getPods();\n      },\n    },\n    //若tab标签页切到日志，则重新加载日志内容\n    activeName: {\n      handler() {\n        if (this.activeName == \"log\") {\n          this.expandKeys.length == 1 ? this.getPodLog(this.expandKeys[0]) : \"\";\n        }\n      },\n    },\n  },\n  beforeMount() {\n    if (\n      localStorage.getItem(\"namespace\") !== undefined &&\n      localStorage.getItem(\"namespace\") !== null\n    ) {\n      this.namespaceValue = localStorage.getItem(\"namespace\");\n    }\n    this.getNamespaces();\n    this.getPods();\n  },\n  beforeUnmount() {\n    //若websocket连接没有关闭，则在改生命周期关闭\n    if (this.socket !== null) {\n      this.socket.close();\n    }\n  },\n};\n</script>\n\n<style scoped>\n.pod-head-card,\n.pod-body-card {\n  border-radius: 1px;\n  margin-bottom: 5px;\n}\n.pod-head-search {\n  width: 160px;\n  margin-right: 10px;\n}\n.pod-body-podname {\n  color: #4795ee;\n}\n.pod-body-podname:hover {\n  color: rgb(84, 138, 238);\n  cursor: pointer;\n  font-weight: bold;\n}\n/* pod状态栏圆点的css实现 */\n.success-dot {\n  display: inline-block;\n  width: 7px;\n  height: 7px;\n  background: rgb(27, 202, 21);\n  border-radius: 50%;\n  border: 1px solid rgb(27, 202, 21);\n  margin-right: 10px;\n}\n.warning-dot {\n  display: inline-block;\n  width: 7px;\n  height: 7px;\n  background: rgb(233, 200, 16);\n  border-radius: 50%;\n  border: 1px solid rgb(233, 200, 16);\n  margin-right: 10px;\n}\n.error-dot {\n  display: inline-block;\n  width: 7px;\n  height: 7px;\n  background: rgb(226, 23, 23);\n  border-radius: 50%;\n  border: 1px solid rgb(226, 23, 23);\n  margin-right: 10px;\n}\n.success-status {\n  color: rgb(27, 202, 21);\n}\n.warning-status {\n  color: rgb(233, 200, 16);\n}\n.error-status {\n  color: rgb(226, 23, 23);\n}\n/deep/ .el-tabs__item {\n  font-size: 12px;\n}\n/deep/ .el-tabs__header {\n  margin-bottom: 8px;\n}\n.pod-body-log-card,\n.pod-body-shell-card {\n  border-radius: 1px;\n  height: 600px;\n  overflow: auto;\n  background-color: #060101;\n}\n.pod-body-log-card {\n  color: aliceblue;\n}\n.pod-body-log-span {\n  white-space: pre;\n}\n</style>\n"]},"metadata":{},"sourceType":"module"}